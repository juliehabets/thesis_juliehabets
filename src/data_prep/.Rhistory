indie_labels <- users_1month %>% filter(label_type == 0)
(360846/618540)*100
View(indie_labels)
library(data.table)
library(dplyr)
library(musicMetadata)
library(tidyr)
library(stringr)
# load dataset
total_label <- fread("../../gen/temp/users_1month_complete_clean.csv")
# clean
total_label <- total_label[-1, -1]
names(total_label)[c(1,2,3,4,5,6,7)] <- c("userid", "artist_MBID", "artist", "track_MBID", "track_name","gender", "label")
# subset the non-NA labels so that the NA labels will not be counted as independent labels
labels <- total_label %>% filter(!(is.na(label)))
labels <- unique(labels$label)
# classify labels
classified_labels <- data.frame(label=labels, parent_label = classify_labels(labels, concatenate = T))
total_label <- full_join(total_label, classified_labels, by = "label")
# rewrite the labels into their classification
total_label$parent_label[total_label$parent_label == ''] <- "independent"
total_label$parent_label[(total_label$parent_label == 'warner')] <- "major"
total_label$parent_label[(total_label$parent_label == 'sony')] <- "major"
total_label$parent_label[(total_label$parent_label == 'universal')] <- "major"
total_label$parent_label[(total_label$parent_label == 'universal,sony')] <- "major"
total_label$parent_label[(total_label$parent_label == 'warner,sony')] <- "major"
total_label$parent_label[(total_label$parent_label == 'warner,universal')] <- "major"
# recoding the label type classification
total_label$label_type [total_label$parent_label == "major"] <- 1
total_label$label_type [total_label$parent_label == "independent"] <- 0
# per artist
total_label_artist <- total_label[, c(3,7,8,9)]
total_label_artist <- distinct(total_label_artist)
# write to csv
write.csv(total_label, "../../gen/temp/label_classification.csv")
write.csv(classified_labels, "../../gen/temp/classified_labels.csv")
write.csv(total_label_artist, "../../gen/temp/label_classification_per_artist.csv")
# load dataset
total_label_corrected <- fread("../../gen/temp/users_1month_complete_clean.csv")
# clean
total_label_corrected <- total_label_corrected[-1, -1]
names(total_label_corrected)[c(1,2,3,4,5,6,7)] <- c("userid", "artist_MBID", "artist", "track_MBID", "track_name","gender", "label")
# corrections
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Jive", "Zomba Records")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "jive", "Zomba Records")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Apple Records1\\b", "Apple Records | EMI Electrola")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Purple Records\\b", "Purple Records | Universal Music Group")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Taste Media", "Taste Media | Warner Music")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Epic\\b", "Epic | Sony BMG")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Dare Records", "Dare Records | Warner Bros. Records")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Lava$", "Lava | Universal Music Group")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Labels | Virgin", "Virgin")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Global Music", "Global Music | Universal Music Group")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Hollywood Records", "Hollywood Records | Universal Music Group")
# subset the non-NA labels so that the NA labels will not be counted as independent labels
labels <- total_label_corrected %>% filter(!(is.na(label)))
labels <- unique(labels$label)
# classify labels
classified_labels <- data.frame(label=labels, parent_label = classify_labels(labels, concatenate = T))
total_label_corrected <- full_join(total_label_corrected, classified_labels, by = "label")
# rewrite the labels into their classification
total_label_corrected$parent_label[total_label_corrected$parent_label == ''] <- "independent"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'warner')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'sony')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'universal')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'universal,sony')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'warner,sony')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'warner,universal')] <- "major"
# recoding the label type classification
total_label_corrected$label_type [total_label_corrected$parent_label == "major"] <- 1
total_label_corrected$label_type [total_label_corrected$parent_label == "independent"] <- 0
# most occuring label type per artist
label_per_artist <- total_label_corrected %>% group_by(artist) %>% count(label_type)
View(total_label_corrected)
label_per_artist <- label_per_artist %>% group_by(artist) %>% mutate(max_n = max(n))
label_per_artist <- label_per_artist %>% group_by(artist) %>% filter(n == max_n)
label_per_artist_1 <- label_per_artist %>% group_by(artist) %>% filter(n == 1) %>% slice(n=1)
label_per_artist_n <- label_per_artist %>% group_by(artist) %>% filter(n >1) %>% arrange(desc(n)) %>% slice(n=1)
label_per_artist <- rbind(label_per_artist_1, label_per_artist_n)
label_per_artist <- label_per_artist[, -c(3,4)]
total_label_corrected <- total_label_corrected[, -9]
total_label_corrected <- full_join(total_label_corrected, label_per_artist, by = "artist")
View(total_label_corrected)
# load dataset
total_label_corrected <- fread("../../gen/temp/users_1month_complete_clean.csv")
# clean
total_label_corrected <- total_label_corrected[-1, -1]
names(total_label_corrected)[c(1,2,3,4,5,6,7)] <- c("userid", "artist_MBID", "artist", "track_MBID", "track_name","gender", "label")
# corrections
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Jive", "Zomba Records")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "jive", "Zomba Records")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Apple Records1\\b", "Apple Records | EMI Electrola")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Purple Records\\b", "Purple Records | Universal Music Group")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Taste Media", "Taste Media | Warner Music")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Epic\\b", "Epic | Sony BMG")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Dare Records", "Dare Records | Warner Bros. Records")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Lava$", "Lava | Universal Music Group")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Labels | Virgin", "Virgin")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Global Music", "Global Music | Universal Music Group")
total_label_corrected$label <- str_replace_all(total_label_corrected$label, "Hollywood Records", "Hollywood Records | Universal Music Group")
# subset the non-NA labels so that the NA labels will not be counted as independent labels
labels <- total_label_corrected %>% filter(!(is.na(label)))
labels <- unique(labels$label)
# classify labels
classified_labels <- data.frame(label=labels, parent_label = classify_labels(labels, concatenate = T))
total_label_corrected <- full_join(total_label_corrected, classified_labels, by = "label")
classify_labels("Elektra")
classify_labels("Parlophone")
classify_labels("Mute")
# rewrite the labels into their classification
total_label_corrected$parent_label[total_label_corrected$parent_label == ''] <- "independent"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'warner')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'sony')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'universal')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'universal,sony')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'warner,sony')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'warner,universal')] <- "major"
# recoding the label type classification
total_label_corrected$label_type [total_label_corrected$parent_label == "major"] <- 1
total_label_corrected$label_type [total_label_corrected$parent_label == "independent"] <- 0
parlophone <- total_label_corrected %>% filter(label == "Parlophone")
View(parlophone)
table(parlophone$label_type)
# most occuring label type per artist
label_per_artist <- total_label_corrected %>% group_by(artist) %>% count(label_type)
View(label_per_artist)
# most occuring label type per artist
label_per_artist <- total_label_corrected %>% group_by(artist) %>% count(label)
label_per_artist <- label_per_artist %>% group_by(artist) %>% mutate(max_n = max(n))
label_per_artist <- label_per_artist %>% group_by(artist) %>% filter(n == max_n)
label_per_artist_1 <- label_per_artist %>% group_by(artist) %>% filter(n == 1) %>% slice(n=1)
label_per_artist_n <- label_per_artist %>% group_by(artist) %>% filter(n >1) %>% arrange(desc(n)) %>% slice(n=1)
label_per_artist <- rbind(label_per_artist_1, label_per_artist_n)
label_per_artist <- label_per_artist[, -c(3,4)]
sum(is.na(label_per_artist$label)
)
11808/13572
# most occuring label type per artist
label_per_artist <- total_label_corrected %>% group_by(artist) %>% count(parent_label)
label_per_artist <- label_per_artist %>% group_by(artist) %>% mutate(max_n = max(n))
label_per_artist <- label_per_artist %>% group_by(artist) %>% filter(n == max_n)
label_per_artist_1 <- label_per_artist %>% group_by(artist) %>% filter(n == 1) %>% slice(n=1)
label_per_artist_n <- label_per_artist %>% group_by(artist) %>% filter(n >1) %>% arrange(desc(n)) %>% slice(n=1)
label_per_artist <- rbind(label_per_artist_1, label_per_artist_n)
label_per_artist <- label_per_artist[, -c(3,4)]
sum(is.na(label_per_artist$label))
sum(is.na(label_per_artist$parent_label))
# most occuring label type per artist
label_per_artist <- total_label_corrected %>% group_by(artist) %>% count(label_type)
label_per_artist <- label_per_artist %>% group_by(artist) %>% mutate(max_n = max(n))
label_per_artist <- label_per_artist %>% group_by(artist) %>% filter(n == max_n)
label_per_artist_1 <- label_per_artist %>% group_by(artist) %>% filter(n == 1) %>% slice(n=1)
label_per_artist_n <- label_per_artist %>% group_by(artist) %>% filter(n >1) %>% arrange(desc(n)) %>% slice(n=1)
label_per_artist <- rbind(label_per_artist_1, label_per_artist_n)
label_per_artist <- label_per_artist[, -c(3,4)]
sum(is.na(label_per_artist$label_type))
# most occuring label type per artist
label_per_artist <- total_label_corrected %>% group_by(artist) %>% count(label)
label_per_artist <- label_per_artist %>% group_by(artist) %>% mutate(max_n = max(n))
label_per_artist <- label_per_artist %>% group_by(artist) %>% filter(n == max_n)
label_per_artist_1 <- label_per_artist %>% group_by(artist) %>% filter(n == 1) %>% slice(n=1)
label_per_artist_n <- label_per_artist %>% group_by(artist) %>% filter(n >1) %>% arrange(desc(n)) %>% slice(n=1)
label_per_artist <- rbind(label_per_artist_1, label_per_artist_n)
label_per_artist <- label_per_artist[, -c(3,4)]
total_label_corrected <- total_label_corrected[, -9]
total_label_corrected <- full_join(total_label_corrected, label_per_artist, by = "artist")
total_label_corrected <- total_label_corrected[, -7]
total_label_corrected <- total_label_corrected[, -7]
names(total_label_corrected)[7] <- "label"
# subset the non-NA labels so that the NA labels will not be counted as independent labels
labels <- total_label_corrected %>% filter(!(is.na(label)))
labels <- unique(labels$label)
# classify labels
classified_labels <- data.frame(label=labels, parent_label = classify_labels(labels, concatenate = T))
total_label_corrected <- full_join(total_label_corrected, classified_labels, by = "label")
# rewrite the labels into their classification
total_label_corrected$parent_label[total_label_corrected$parent_label == ''] <- "independent"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'warner')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'sony')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'universal')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'universal,sony')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'warner,sony')] <- "major"
total_label_corrected$parent_label[(total_label_corrected$parent_label == 'warner,universal')] <- "major"
table(total_label_corrected$parent_label)
# recoding the label type classification
total_label_corrected$label_type [total_label_corrected$parent_label == "major"] <- 1
total_label_corrected$label_type [total_label_corrected$parent_label == "independent"] <- 0
sum(is.na(total_label_corrected$label))
33978/620118
# write to csv
write.csv(total_label_corrected, "../../gen/temp/users_1month_classified.csv")
# import dataset
users_1month <- fread("../../gen/temp/users_1month_classified.csv")
users_1month <- users_1month[, -1]
users_1month <- users_1month %>% filter(!(is.na(userid)))
# create separate dataset with only artist, userid & gender
gender <- users_1month[, c(1,3,6)]
# split dataset per user
gender_split <- split(gender, gender$userid)
# function to assign user gender to each artist
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
distinct(df, df[2], .keep_all = TRUE)
}
# apply function to all users
gender_artist <- lapply(gender_split, gender_artist_per_user)
# turn list into data frame
gender_artist <- do.call(rbind.data.frame, gender_artist)
row.names(gender_artist) <- NULL
gender_artist <- gender_artist[-c(1)]
# count times of gender per artist & pivot wider
gender_artist <-
gender_artist %>%
group_by(artist, gender) %>%
summarise(total_count=n(), .groups = 'drop')
gender_artist$gender[(gender_artist$gender) == ''] <- 'none'
gender_artist <- gender_artist %>%
group_by(artist) %>% pivot_wider(names_from = gender,values_from = total_count)
# recoding NA values to 0
gender_artist[is.na(gender_artist)] <- 0
# coding the gender ratios
gender_artist <-
gender_artist %>%
mutate(ratiofem = f/(f+m+none))
# write to csv
write.csv(gender_artist, file = "../../gen/temp/gender_ratio_artist.csv")
# matching to the dataset
gender_artist <- gender_artist[, -c(2:4)]
# join with dataset
users_1month <- full_join(users_1month, gender_artist, by = "artist")
# write to csv
write.csv(users_1month, "../../gen/temp/users_1month_allmod.csv")
library(dplyr)
library(data.table)
library(DescTools)
library(tidyr)
library(magrittr)
library(ineq)
# load data
users_1month <- fread("../../gen/temp/users_1month_allmod.csv")
gender_ratio <- fread("../../gen/temp/gender_ratio_artist.csv")
# removing columns for better overview (userid, trackname, artist, gender,label_type, femratio))
users_1month <- users_1month[, c(2, 4, 6, 7, 10, 11)]
users_1month <- users_1month %>% filter(!(is.na(artist)))
# removing columns for better overview (artist & femratio)
gender_ratio <- gender_ratio[, c(2,6)]
users_PR <-
users_1month %>%
group_by(artist) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n))
total_revenue = length(unique(users_1month$userid))*9.99
users_PR <-
users_PR %>%
mutate(revenue_PR = freq*total_revenue)
users_PR <- merge(users_PR, users_1month, by = "artist")
users_PR <- users_PR[, c(1,3,4)] %>% distinct()
# gini pro rata
gini_PR <- Gini(users_PR$revenue_PR)
# lorenz curve pro rata
plot(Lc(users_PR$revenue_PR), col = "blue", lwd = 2, main = "Lorenz Curve Pro Rata Model",
xlab = "cumulative % of artists", ylab = "cumulative % of income")
text(x = 0.12, y = 0.9, "Gini = 0.83", cex = 1.1)
##############
#USER-CENTRIC#
##############
users_split <- split(users_1month, users_1month$userid)
# revenue per user function
revenue_per_user <- function(l){
df <- as.data.frame(l)
df %>% group_by(df[2]) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
mutate(revenue_UC = freq * 9.99) %>%
ungroup()
}
# apply to every list in users_UC_split
users_UC_split <- lapply(users_split, revenue_per_user)
# turn list into data frame
unlist_UC_split <- do.call(rbind.data.frame, users_UC_split)
row.names(unlist_UC_split) <- NULL
# aggregating the data to artist level
users_UC <- unlist_UC_split %>% aggregate(revenue_UC ~ artist, sum)
users_UC <- merge(users_UC, users_1month, by = "artist")
users_UC <- users_UC[, -c(3:7)] %>% distinct()
# gini user-centric
gini_UC <- Gini(users_UC$revenue_UC)
# lorenz curve user-centric
plot(Lc(users_UC$revenue_UC), col = "red", lwd = 2, main = "Lorenz Curve User-Centric Model",
xlab = "cumulative % of artists", ylab = "cumulative % of income")
text(x = 0.12, y = 0.9, "Gini = 0.87", cex = 1.1)
users_AGM <- users_PR %>% mutate(decile = ntile(-freq, 10))
names(users_AGM)[3] <- "revenue_AGM"
# taxing decile 1 & 2
dec12 <- users_AGM %>% filter(decile <= 2)
dec12$revenue_AGM <- dec12$revenue_AGM*0.9
# giving back to decile 3-6
dec3456 <- users_AGM %>% filter(decile %in% (3:6))
rev_cut <- sum(dec12$revenue_AGM)*0.1
# checking unique artists
length(unique(dec3456$artist))
artists_dec3456 <- 13664 # CHECK THIS IF DATASET CHANGES
# extra revenue per artist
extra <- rev_cut/artists_dec3456
dec3456$revenue_AGM <- dec3456$revenue_AGM+extra
# creating dataset decile 7-10
dec78910 <- users_AGM %>% filter(decile %in% (7:10))
# merging datasets together
users_AGM <- rbind(dec12, dec3456, dec78910)
users_AGM <- users_AGM[, -c(2,4)] %>% distinct()
# gini AGM
gini_AGM <- Gini(users_AGM$revenue_AGM)
# lorenz curve AGM
plot(Lc(users_AGM$revenue_AGM), col = "green", lwd = 2, main = "Lorenz Curve AGM model",
xlab = "cumulative % of artists", ylab = "cumulative % of income")
text(x = 0.12, y = 0.9, "Gini = 0.77", cex = 1.1)
# merging all the models together
users_PR <- users_PR[, -2]
artist_remuneration_final <- merge((merge(users_PR, users_UC, by = "artist")), users_AGM, by = "artist")
artist_info <- users_1month[, c(2,5)] %>% distinct()
artist_info <- merge(artist_info, gender_ratio, by = "artist")
artist_remuneration_final <- merge(artist_info, artist_remuneration_final, by = "artist")
# merging with factors
users_PR$model <- as.factor("PR")
users_UC$model <- as.factor("UC")
users_AGM$model <- as.factor("AGM")
names(users_PR)[2] <- "revenue"
names(users_UC)[2] <- "revenue"
names(users_AGM)[2] <- "revenue"
artist_remuneration_factors <- rbind(users_PR, users_UC, users_AGM)
artist_remuneration_factors <- merge(artist_info, artist_remuneration_factors, by = "artist")
# overlaying the lorenz curves
plot(Lc(artist_remuneration_final$revenue_PR), col = 'blue')
lines(Lc(artist_remuneration_final$revenue_UC), col = 'red')
lines (Lc(artist_remuneration_final$revenue_AGM), col = 'green')
legend("topleft", c("Pro Rata", "User-Centric", "AGM"), fill = c("blue", "red", "green"))
# write to csv
write.csv(artist_remuneration_final, "../../gen/temp/artist_remuneration_final.csv")
write.csv(artist_remuneration_factors, "../../gen/temp/artist_remuneration_factors.csv")
# load data
users_1month <- fread("../../gen/temp/users_1month_allmod.csv", select = c(2:11))
userinfo <- fread("../../gen/temp/userinfo_filtered.csv", select = c(2:6))
# check the amount of unique users
length(unique(users_1month$userid))
# unique artists in data set
length(unique(users_1month$artist))
# unique tracks in data set
length(unique(users_1month$track_name))
# labels
sum(is.na(users_1month$label_type))
(33978/618540)*100
length(unique(users_1month$label))
# which kind of artists are NA
na_label <- users_1month %>% filter(is.na(label))
sum(str_count(na_label$artist, "dj"))
sum(str_count(na_label$artist, "orchestra"))
sum(str_count(na_label$artist, "symphony"))
na_label <- na_label %>% count(artist)
View(na_label)
# label info
labels <- data.frame(users_1month$label)
labels <- labels %>% count(users_1month.label) %>% filter(!is.na(users_1month.label))
View(labels)
# % of major labels/independent labels
major_labels <- users_1month %>% filter(label_type == 1)
(232014/618540)*100
indie_labels <- users_1month %>% filter(label_type == 0)
(352548/618540)*100
classify_labels("Acetate Ltd")
classify_labels("RCA")
library(data.table)
library(dplyr)
library(DescTools)
library(broom)
library(ggplot2)
# load data
remuneration <- fread("../../gen/temp/artist_remuneration_final.csv", select = c(2:7))
remuneration_factors <- fread("../../gen/temp/artist_remuneration_factors.csv", select = c(2:6))
# factor vars
remuneration_factors$model <- as.factor(remuneration_factors$model)
remuneration_factors$model <- relevel(remuneration_factors$model, "PR")
# Gini coefficients
gini_PR <- Gini(remuneration$revenue_PR, na.rm = FALSE)
gini_UC <- Gini(remuneration$revenue_UC, na.rm = FALSE)
gini_AGM <- Gini(remuneration$revenue_AGM, na.rm = FALSE)
# estimating the model
mlm <- lm(revenue ~ model * label_type + model * ratiofem, remuneration_factors); summary(mlm)
mlm_res <- augment(mlm)
# recoding the revenue variable
remuneration_factors$revenue <- log(remuneration_factors$revenue)
# estimating model
mlm_log <- lm(revenue ~ model * label_type + model * ratiofem, remuneration_factors); summary(mlm_log)
mlm_log_res <- augment(mlm_log)
plot(mlm_log, 1)
cov <- merge(remuneration_factors, tlt, by = "artist")
users_1month <- fread("../../gen/temp/users_1month_allmod.csv", select = c(2:11))
users_1month <- users_1month %>% filter(!(is.na(artist)))
# times listened to
tlt <- users_1month %>% count(artist)
# number of users
nou <- users_1month[, c(1,3)] %>% distinct()
nou <- nou %>% count(artist)
cov <- merge(remuneration_factors, tlt, by = "artist")
names(cov)[6] <- "tlt"
cov  <- merge(cov, nou, by = "artist")
names(cov)[7] <- "nou"
mlm_cov_log <- lm(revenue ~ model * label_type + model * ratiofem + tlt + nou, cov); summary(mlm_cov_log)
# cov log valeus
cov$tlt_log <- log(cov$tlt)
cov$nou_log <- log(cov$nou)
# cov log
cov_log <- cov[, -c(6,7)]
mlm_cov_log2 <- lm(revenue ~ model * label_type + model * ratiofem + tlt_log + nou_log, cov_log); summary(mlm_cov_log2)
plot(mlm_cov_log2, 1)
# load data
users_1month <- fread("../../gen/temp/users_1month_allmod.csv", select = c(2:11))
# % of major labels/independent labels
major_labels <- users_1month %>% filter(label_type == 1)
View(major_labels)
# artists under major labels
major_labels <- major_labels[3]
# % of major labels/independent labels
major_labels <- users_1month %>% filter(label_type == 1)
# artists under major labels
major_labels <- major_labels[m 3]
# artists under major labels
major_labels <- major_labels[, 3]
# % of major labels/independent labels
major_labels <- users_1month %>% filter(label_type == 1)
# artists under major labels
major_labels <- major_labels[, 3] %>% distinct
users_1month <- fread("../../gen/temp/users_1month_allmod.csv", select = c(2:11))
users_1month <- users_1month %>% filter(!(is.na(artist)))
View(users_1month)
View(cov_log)
# Pro rata
users_1month <- fread("../../gen/temp/users_1month_allmod.csv")
users_1month <- users_1month[, c(2:11)]
users_1month <- users_1month %>% filter(!(is.na(artist)))
# Pro rata
users_1month <- fread("../../gen/temp/users_1month_allmod.csv")
users_1month <- users_1month[, c(2:11)]
users_1m_PR <- users_1month %>% filter(artist %in% sampleartistsPR$artist)
# create a sample with a random division of artists
artists_df <- remuneration[, 1] %>% distinct()
artists <- as.vector(artists_df$artist)
34420/3
34157/3
11385+11385+11384
11385 +11386 + 11386
set.seed(5)
sampleartistsPR <-sample(artists, 11385 , replace = FALSE)
sampleartistsPR  <- data.frame(sampleartistsPR) %>% mutate(sample = "PR")
artists_vector <- as.vector(artists$artist)
set.seed(5)
sampleartistsPR <-sample(artists, 11385 , replace = FALSE)
sampleartistsPR  <- data.frame(sampleartistsPR) %>% mutate(sample = "PR")
names(sampleartistsPR)[1] <- "artist"
artists <- anti_join(artists_df, sampleartistsPR, by = "artist")
artists_vector <- as.vector(artists$artist)
set.seed(5)
sampleartistsUC <-sample(artists_vector, 11386, replace = FALSE)
sampleartistsUC  <- data.frame(sampleartistsUC) %>% mutate(sample = "UC")
names(sampleartistsUC)[1] <- "artist"
total_sample <- rbind(sampleartistsPR, sampleartistsUC)
sampleartistsAGM <- anti_join(artists_df, total_sample, by = "artist") %>% mutate(sample = "AGM")
View(sampleartistsAGM)
total_sample <- rbind(total_sample, sampleartistsAGM)
users_1m_PR <- users_1month %>% filter(artist %in% sampleartistsPR$artist)
users_PR <-
users_1m_PR %>%
group_by(artist) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n))
total_revenue = length(unique(users_1m_PR$userid))*9.99
users_PR <-
users_PR %>%
mutate(revenue = freq*total_revenue)
users_PR <- merge(users_PR, users_1m_PR, by = "artist")
users_PR <- users_PR[, c(1,3,4)] %>% distinct() %>% mutate(model = "PR")
gini_PR <- Gini(users_PR$revenue)
##############
#USER-CENTRIC#
##############
users_1m_UC <- users_1month %>% filter(artist %in% sampleartistsUC$artist)
users_split <- split(users_1m_UC, users_1m_UC$userid)
# revenue per user function
revenue_per_user <- function(l){
df <- as.data.frame(l)
df %>% group_by(df[3]) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
mutate(revenue = freq * 9.99) %>%
ungroup()
}
# apply to every list in users_UC_split
users_UC_split <- lapply(users_split, revenue_per_user)
# turn list into data frame
unlist_UC_split <- do.call(rbind.data.frame, users_UC_split)
row.names(unlist_UC_split) <- NULL
# aggregating the data to artist level
users_UC <- unlist_UC_split %>% aggregate(revenue ~ artist, sum)
View(users_UC)
# apply to every list in users_UC_split
users_UC_split <- lapply(users_split, revenue_per_user)
# turn list into data frame
unlist_UC_split <- do.call(rbind.data.frame, users_UC_split)
row.names(unlist_UC_split) <- NULL
View(unlist_UC_split)
0.075681818+0.075681818+0.075681818+0.006956825+0.014394813
# aggregating the data to artist level
users_UC <- unlist_UC_split %>% aggregate(revenue ~ artist, sum)
