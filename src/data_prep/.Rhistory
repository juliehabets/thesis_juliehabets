users_1month <- users_1month[-c(6, 8:10)]
userdata_1k_1month <- userdata_1k %>% filter(months >= 1)
users_1month <- userdata_1k_1month %>% filter(date >= "2009-04-01" & date <= "2009-04-30")
############
#ADD GENDER#
############
users_1month <- merge(users_1month, userinfo_filtered, by = "userid")
View(users_1month)
users_1month <- users_1month[-c(11, 13:15)]
View(users_1month)
# write to csv
write.csv(users_1month, file = "../../gen/temp/users_1month.csv")
# load data
users_1month <- read_csv("../../gen/temp/users_1month.csv")
View(users_1month)
# removing columns for better overview
users_1month <- users_1month[c(2, 8:12)]
users_PR <-
users_1month %>%
group_by(artist) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n))
total_revenue = length(unique(users_1month$userid))*9.99
users_PR <-
users_PR %>%
mutate(revenue = freq*total_revenue)
# gini pro rata
gini_PR <- Gini(users_PR$revenue)
# lorenz curve pro rata
plot(Lc(users_PR$revenue), col = "blue", lwd = 2, main = "Lorenz Curve Pro Rata Model",
xlab = "cumulative % of artists", ylab = "cumulative % of income")
text(x = 0.12, y = 0.9, "Gini = 0.89", cex = 1.1)
##############
#USER-CENTRIC#
##############
users_split <- split(users_1month, users_1month$userid)
# revenue per user function
revenue_per_user <- function(l){
df <- as.data.frame(l)
df %>% group_by(df[3]) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
mutate(revenue = freq * 9.99) %>%
ungroup()
}
# apply to every list in users_UC_split
users_UC_split <- lapply(users_split, revenue_per_user)
# turn list into data frame
unlist_UC_split <- do.call(rbind.data.frame, users_UC_split)
row.names(unlist_UC_split) <- NULL
# aggregating the data to artist level
users_UC <- unlist_UC_split %>% aggregate(revenue ~ artist, sum)
# gini user-centric
gini_UC <- Gini(users_UC$revenue)
# lorenz curve user-centric
plot(Lc(users_UC$revenue), col = "red", lwd = 2, main = "Lorenz Curve User-Centric Model",
xlab = "cumulative % of artists", ylab = "cumulative % of income")
text(x = 0.12, y = 0.9, "Gini = 0.91", cex = 1.1)
# overlaying the lorenz curve
plot(Lc(users_PR$revenue), col = 'blue')
lines(Lc(users_UC$revenue), col = 'red')
legend("topleft", c("Pro Rata", "User-Centric"), fill = c("blue", "red"))
View(users_1month)
#####################
#ARTIST GROWTH MODEL#
#####################
ntiles <- function(x, bins) {
quantiles = seq(from=0, to = 1, length.out=bins+1)
cut(ecdf(x)(x),breaks=quantiles, labels=F)
}
?ntile
cume_dist(users_PR$revenue)
users_AGM <- users_PR %>% mutate(decile = ntile(freq, 10))
View(users_AGM)
users_AGM <- users_PR %>% mutate(decile = ntile(-freq, 10))
View(users_AGM)
dec12 <- users_AGM %>% filter(decile == 1, 2)
dec12 <- users_AGM %>% filter(decile == 1 | 2)
table(dec12$decile)
View(dec12)
dec12 <- users_AGM %>% filter(decile == 1)
table(dec12$decile)
dec12 <- users_AGM %>% filter(decile <= 2)
table(dec12$decile)
rev_cut <- sum(dec12$revenue)*0.1
dec3456 <- users_AGM %>% filter(decile %in% (3:6))
table(dec3456$decile)
length(unique(dec3456$artist))
artists_dec3456 <- length(unique(dec3456$artist))
artists_dec3456 <- 13676
# extra revenue per artist
artists_dec3456/rev_cut
# extra revenue per artist
extra <- artists_dec3456/rev_cut
# AGM model
AGM_model <- function(artist){
if (decile <= 2){
revenue * 0.9
} else if (decile %in% (3:6)){
revenue + extra
} else {
revenue + 0
}
}
# applying
AGM_test <- lapply(dec12, AGM_model)
# applying
AGM_test <- lapply(dec12$artist, AGM_model)
# extra revenue per artist
extra <- rev_cut/artists_dec3456
# AGM model
AGM_model <- function(artist, decile, revenue){
if (decile <= 2){
revenue * 0.9
} else if (decile %in% (3:6)){
revenue + extra
} else {
revenue + 0
}
}
# applying
AGM_test <- mapply(AGM_model(artist, decile, revenue), artist_decile+revenue, dec12$artist, dec12$decile, dec12$revenue)
AGM_test <- lapply(dec12, revenue*0.9 if (decile <= 2) x else NULL)
AGM_test <- for(i in 1:nrow(dec12)) {
if(dec12[i, ]$decile <= 2){
revenue * 0.9
}
}
AGM_test <- for(i in 1:nrow(dec12)) {
if(dec12[i, ]$decile <= 2){
dec12[i, ]$revenue * 0.9
}
}
rm(AGM_test)
dec12$revenue <- dec12$revenue*0.9
View(dec12)
# taxing decile 1 & 2
dec12 <- users_AGM %>% filter(decile <= 2)
mean(dec12$revenue)
dec12$revenue <- dec12$revenue*0.9
mean(dec12$revenue)
mean(dec3456$revenue)
dec3456$revenue <- dec3456$revenue+extra
mean(dec3456$revenue)
# creating dataset decile 7-10
dec78910 <- users_AGM %>% filter(decile %in% (7:10))
# merging datasets together
users_AGM2 <- rbind(dec12, dec3456, dec78910)
View(users_AGM)
View(users_AGM2)
# merging datasets together
users_AGM <- rbind(dec12, dec3456, dec78910)
rm(users_AGM2)
# gini
gini_AGM <- Gini(users_AGM$revenue)
# lorenz curve user-centric
plot(Lc(users_AGM$revenue), col = "green", lwd = 2, main = "Lorenz Curve AGM model",
xlab = "cumulative % of artists", ylab = "cumulative % of income")
text(x = 0.12, y = 0.9, "Gini = 0.76", cex = 1.1)
# overlaying the lorenz curve
plot(Lc(users_PR$revenue), col = 'blue')
lines(Lc(users_UC$revenue), col = 'red')
lines (Lc(users_AGM$revenue), col = 'green')
legend("topleft", c("Pro Rata", "User-Centric", "AGM"), fill = c("blue", "red", "green"))
View(users_PR)
View(userdata_1k_1month)
View(users_1month)
View(users_1month)
gender_tryout <- users_1m[c(-2,4,5)]
gender_tryout <- users_1m[-c(2,4,5)]
View(gender_tryout)
gender_tryout <- users_1month[-c(2,4,5)]
View(users_1m)
gender_tryout %>% group_by(userid) %>% unique(artist)
gender_tryout <- group_by(gender_tryout$userid) %>% unique(gender_tryout$artist)
gender_tryout2 <- gender_tryout %>% userid %>% unique($artist)
gender_tryout2 <- gender_tryout %>% userid %>% unique(artist)
gender_tryout2 <- gender_tryout %>% group_by(userid) %>% unique(artist)
gender_tryout2 <- gender_tryout %>% group_by(userid)
gender_tryout2 <- split(gender_tryout, users_1month$userid)
View(gender_tryout2)
gender_tryout2 <- split(gender_tryout, users_1month$userid)
gender_tryout2 <- split(gender_tryout, gender_tryout$userid)
gender_tryout <- users_1month[-c(2,4,5)]
gender_tryout2 <- split(gender_tryout, gender_tryout$userid)
View(gender_tryout2)
# revenue per user function
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df %>% unique(df[2]) #%>%
# mutate(gender = df[3]) %>%
# ungroup()
}
# apply to every list in users_UC_split
gender_tryout3 <- lapply(gender_tryout2, gender_artist_per_user)
?unique
rm(gender_tryout3)
# revenue per user function
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df %>% unique(df[2], incomparables != FALSE) #%>%
# mutate(gender = df[3]) %>%
# ungroup()
}
# apply to every list in users_UC_split
gender_tryout3 <- lapply(gender_tryout2, gender_artist_per_user)
?lapply
# revenue per user function
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df %>% unique(df[2]) #%>%
# mutate(gender = df[3]) %>%
# ungroup()
}
# apply to every list in users_UC_split
tryout3 <- gender_artist_per_user(gender_tryout[1])
gender_tryout[1]
gender_tryout2[1]
# apply to every list in users_UC_split
tryout3 <- gender_artist_per_user(gender_tryout2[1])
# apply to every list in users_UC_split
tryout3 <- gender_artist_per_user(gender_tryout2[1], incomparables != FALSE)
# revenue per user function
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df %>% unique(df[2], incomparables != FALSE) #%>%
# mutate(gender = df[3]) %>%
# ungroup()
}
# apply to every list in users_UC_split
tryout3 <- gender_artist_per_user(gender_tryout2[1])
# apply to every list in users_UC_split
gender_tryout2[1] %>% unique(artist)
# apply to every list in users_UC_split
gender_tryout2[1][2]
# apply to every list in users_UC_split
gender_tryout2[1]
# apply to every list in users_UC_split
df <- as.data.frame(gender_tryout2[1])
df
df[2]
unique(df[2])
df2 <- unique(df[2])
df2 < df2 %>% mutate(gen = df[3])
gen <- df[3]
View(gen)
gen <- unique(df[3])
View(gen)
df2 < df2 %>% mutate(gen = gen)
View(df2)
df2 < df2 %>% mutate(gen = df[1,3)
df2 < df2 %>% mutate(gen = df[1,3])
df[1,3]
df2 < df2["gender"] = "df[1,3]"
df2 < df2["gender"] = df[1,3]
df2 <0 df2["gender"] = df[1,3]
df2 <- df2["gender"] = df[1,3]
df2 <- df2["gender"] = gen
df2 <- df2["gender"] = "gen"
df2["gender"] = "gen"
View(df2)
df2["gender"] = gen"
df2["gender"] = gen
df2["gender"] = gen
View(df2)
# revenue per user function
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df2 <- unique(df[2])
gen <- df[1,3]
df2["gender"] = gen
}
# apply to every list in users_UC_split
gender_tryout3 <- lapply(gender_tryout2, gender_artist_per_user)
View(gender_tryout3)
View(users_1month)
gender_tryout <- users_1month[-c(2, 4:5)]
View(gender_tryout)
gender_tryout2 <- split(gender_tryout, gender_tryout$userid)
df <- gender_tryout2[1]
View(df)
unique(df[2])
# revenue per user function
> gender_artist_per_user <- function(l){
# revenue per user function
> gender_artist_per_user <- function(l){
# revenue per user function
> gender_artist_per_user <- function(l) {
# revenue per user function
> gender_artist_per_user <- function(l) {
gender_tryout[1]
gender_tryout2[1]
df <-gender_tryout2[1]
df <- as.data.frame(gender_tryout2[1])
gender_tryout2[1]
gender_tryout2[1][2]
gender_tryout2[1]$artist
?unique
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df2 <- unique(df[2])
}
gen <- df[1,3]
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df2 <- unique(df[2])
gen <- df[1,3]
}
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df2 <- unique(df[2])
gen <- df[1,3]
df2["gender"] = gen
}
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df2 <- unique(df[2])
gen <- df[1,3]
df2["gender"] = gen
rm(df)
}
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df2 <- unique(df[2])
gen <- df[1,3]
df2["gender"] = gen
rm(df)
}
tryout3 <- gender_artist_per_user(gender_tryout2[1])
rm(tryout3)
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df2 <- unique(df[2])
gen <- df[1,3]
df2["gender"] = gen
rm(df)
return{df2}
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df2 <- unique(df[2])
gen <- df[1,3]
df2["gender"] = gen
}
tryout3 <- gender_artist_per_user(gender_tryout2[1])
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
df2 <- unique(df[2])
#gen <- df[1,3]
df2["gender"] = df[1,3]
}
tryout3 <- gender_artist_per_user(gender_tryout2[1])
tryout3 <- gender_artist_per_user(gender_tryout2[1])
View(df)
?group_by
df5 <- df %>% group_by(df[2], add = TRUE)
View(df5)
rm(df5)
?unqie
?unique
df5 <- distinct(df, df[2], keep_all = TRUE)
View(df5)
?distinct
df5 <- distinct(df, df[2], .keep_all = TRUE)
View(df5)
# revenue per user function
> gender_artist_per_user <- function(l) {
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
distinct(df, df[2], .keep_all = TRUE)
}
tryout3 <- gender_artist_per_user(gender_tryout2[1])
View(tryout3)
rm(tryout3)
rm(gender_tryout3)
gender_tryout3 <- lapply(gender_tryout2, gender_artist_per_user)
View(gender_tryout3)
# turn list into data frame
ginder_tryout3 <- do.call(rbind.data.frame, gender_tryout3)
View(ginder_tryout3)
row.names(unlist_UC_split) <- NULL
row.names(gender_tryout3) <- NULL
View(ginder_tryout3)
# turn list into data frame
gender_tryout3 <- do.call(rbind.data.frame, gender_tryout3)
rm(ginder_tryout3)
row.names(gender_tryout3) <- NULL
View(gender_tryout3)
gender_tryout3[-c(1)]
gender_tryout3 <- gender_tryout3[-c(1)]
View(gender_tryout3)
?aggregate
View(gender_tryout3)
gender_tryout4 <-
gender_tryout3 %>% group_by(artist) %>%
summarise(total_count=n(),
.groups = 'drop')
View(gender_tryout4)
gender_tryout4 <-
gender_tryout3 %>% group_by(artist, gender) %>%
summarise(total_count=n(),
.groups = 'drop')
View(gender_tryout4)
gender_tryout4 <-
gender_tryout3 %>% group_by(artist, gender) %>%
summarise(total_count=n(),
.groups = 'drop') %>%
as.data.frame()
View(gender_tryout4)
?pivot_wider
gender_tryout_wide <- gender_tryout4 %>% pivot_wider(names_from = gender,
values_from = total_count)
View(gender_tryout_wide)
View(gender_tryout)
rm(gender_tryout)
# create separate dataset
gender <- users_1month[-c(2, 4:5)]
# split dataset per user
gender_split <- split(gender, gender$userid)
gender_artist <- lapply(gender_split, gender_artist_per_user)
rm(gender_tryout2)
# turn list into data frame
gender_artist <- do.call(rbind.data.frame, gender_artist)
row.names(gender_artist) <- NULL
gender_artist <- gender_artist[-c(1)]
View(gender_artist)
gender_artist <-
gender_artist %>% group_by(artist, gender) %>%
summarise(total_count=n(),
.groups = 'drop') %>%
as.data.frame()
View(gender_artist)
gender_artist <-
gender_artist %>%
group_by(artist, gender) %>%
summarise(total_count=n(), .groups = 'drop') %>%
pivot_wider(names_from = gender,values_from = total_count)
View(gender_artist)
rm(gender_tryout_wide)
rm(gender_tryout3)
rm(gender_tryout4)
gender_artist <-
gender_artist %>%
mutate(ratiofem = (f / (f+m+'NA')))
names(gender_artist)[names(gender_artist) == 'NA'] <- 'none'
View(gender_artist)
gender_artist <-
gender_artist %>%
mutate(ratiofem = (f/sum(f+m+none)))
View(gender_artist)
gender_artist <-
gender_artist %>%
mutate(ratiofem = (sum(f)/sum(f+m+none)))
View(gender_artist)
gender_artist
?sum
gender_artist <-
gender_artist %>%
mutate(ratiofem = (sum(f, na.rm = TRUE)/sum(f+m+none, na.rm = TRUE)))
View(gender_artist)
gender_artist <-
gender_artist %>%
mutate(ratiofem = f/f+m+none, na.rm = TRUE))
gender_artist <-
gender_artist %>%
mutate(ratiofem = f/f+m+none, na.rm = TRUE)
View(gender_artist)
?mutate
gender_artist[is.na(gender_artist)] <- 0
View(gender_artist)
gender_artist <-
gender_artist %>%
mutate(ratiofem = f/(f+m+none))
View(gender_artist)
gender_artist <-
gender_artist %>%
mutate(ratiofem = f/(f+m+none),
ratiomale = m/(f+m+none))
rm(gender_artist$na.rm)
View(gender_artist)
# create separate dataset
gender <- users_1month[-c(2, 4:5)]
# split dataset per user
gender_split <- split(gender, gender$userid)
# function to assign user gender to each artist
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
distinct(df, df[2], .keep_all = TRUE)
}
# apply function to all users
gender_artist <- lapply(gender_split, gender_artist_per_user)
# turn list into data frame
gender_artist <- do.call(rbind.data.frame, gender_artist)
row.names(gender_artist) <- NULL
gender_artist <- gender_artist[-c(1)]
# count times of gender per artist & pivot wider
gender_artist <-
gender_artist %>%
group_by(artist, gender) %>%
summarise(total_count=n(), .groups = 'drop') %>%
pivot_wider(names_from = gender,values_from = total_count)
# recoding column to make mutation easier
names(gender_artist)[names(gender_artist) == 'NA'] <- 'none'
# recoding NA values to 0
gender_artist[is.na(gender_artist)] <- 0
# coding the gender ratios
gender_artist <-
gender_artist %>%
mutate(ratiofem = f/(f+m+none),
ratiomale = m/(f+m+none))
View(gender_artist)
# write to csv
write.csv(gender_artist, file = "../../gen/temp/gender_ratio_artist.csv")
