ungroup()
}
# revenue per user function
revenue_per_user <- function(l){
df <- as.data.frame(l)
df %>% group_by(df[2]) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
mutate(revenue_UC = freq * 10 * 0.7) %>%
ungroup()
}
##############
#USER-CENTRIC#
##############
users_split <- split(users_1month, users_1month$userid)
# revenue per user function
revenue_per_user <- function(l){
df <- as.data.frame(l)
df %>% group_by(df[2]) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
mutate(revenue_UC = freq * 10 * 0.7) %>%
ungroup()
}
# apply to every list in users_UC_split
users_UC_split <- lapply(users_split, revenue_per_user)
# turn list into data frame
unlist_UC_split <- do.call(rbind.data.frame, users_UC_split)
row.names(unlist_UC_split) <- NULL
# aggregating the data to artist level
users_UC <- unlist_UC_split %>% aggregate(revenue_UC ~ artist, sum)
users_UC <- merge(users_UC, users_1month, by = "artist")
users_UC <- users_UC[, -c(3:7)] %>% distinct()
users_AGM <- users_PR %>% mutate(decile = ntile(-freq, 10))
names(users_AGM)[3] <- "revenue_AGM"
View(users_AGM)
# taxing decile 1 & 2
dec12 <- users_AGM %>% filter(decile <= 2)
dec12$revenue_AGM <- dec12$revenue_AGM*0.9
# giving back to decile 3-6
dec3456 <- users_AGM %>% filter(decile %in% (3:6))
rev_cut <- sum(dec12$revenue_AGM)*0.1
# checking unique artists
length(unique(dec3456$artist))
artists_dec3456 <- 9478 # CHECK THIS IF DATASET CHANGES
# extra revenue per artist
extra <- rev_cut/artists_dec3456
dec3456$revenue_AGM <- dec3456$revenue_AGM+extra
# creating dataset decile 7-10
dec78910 <- users_AGM %>% filter(decile %in% (7:10))
# merging datasets together
users_AGM <- rbind(dec12, dec3456, dec78910)
users_AGM <- users_AGM[, -c(2,4)] %>% distinct()
# merging all the models together
users_PR <- users_PR[, -2]
artist_remuneration_final <- merge((merge(users_PR, users_UC, by = "artist")), users_AGM, by = "artist")
artist_info <- users_1month[, c(2,5)] %>% distinct()
artist_info <- merge(artist_info, gender_ratio, by = "artist")
artist_remuneration_final <- merge(artist_info, artist_remuneration_final, by = "artist")
# merging with factors
users_PR$model <- as.factor("PR")
users_UC$model <- as.factor("UC")
users_AGM$model <- as.factor("AGM")
names(users_PR)[2] <- "revenue"
names(users_UC)[2] <- "revenue"
names(users_AGM)[2] <- "revenue"
artist_remuneration_factors <- rbind(users_PR, users_UC, users_AGM)
artist_remuneration_factors <- merge(artist_info, artist_remuneration_factors, by = "artist")
# write to csv
write.csv(artist_remuneration_final, "../../gen/temp/artist_remuneration_final_exclna.csv")
write.csv(artist_remuneration_factors, "../../gen/temp/artist_remuneration_factors_exclna.csv")
library(data.table)
library(dplyr)
users_1month <- fread("../../gen/temp/users_1month_allmod.csv", select = c(2:11))
# times listened to
ts <- users_1month %>% count(artist)
# mean & variance
mean <- mean(ts$n)
variance <- var(ts$n)
# write to csv
write.csv(ts, "../../gen/temp/ts.csv")
library(data.table)
library(dplyr)
library(anytime)
library(ggplot2)
library(stringr)
# load data
users_1month <- fread("../../gen/temp/users_1month_allmod.csv", select = c(2:11))
userinfo <- fread("../../gen/temp/userinfo_filtered.csv", select = c(2:6))
artist_remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
ts <- fread("../../gen/temp/ts.csv", select = c(2:3))
# check which artists are listened to the most
most_popular_artists <- as.data.frame(sort(table(users_1month$artist), decreasing = TRUE)[1:50])
View(most_popular_artists)
#####################
#ARTIST REMUNERATION#
#####################
remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
remuneration <- merge(remuneration, ts, by = "artist")
names(remuneration)[7] <- "ts"
summary(remuneration$label_type)
summary(remuneration$revenue_PR)
summary(remuneration$revenue_AGM)
summary(remuneration$revenue_UC)
library(data.table)
library(dplyr)
library(broom)
library(ggplot2)
library(stringr)
library(jtools)
library(car)
library(fixest)
library(Hmisc)
library(lmtest)
library(miceadds)
# load data
remuneration_factors_exclna <- fread("../../gen/temp/artist_remuneration_factors_exclna.csv", select = c(2:6))
ts <- fread("../../gen/temp/ts.csv", select = c(2:3))
# factor vars
remuneration_factors_exclna$model <- as.factor(remuneration_factors_exclna$model)
remuneration_factors_exclna$model <- relevel(remuneration_factors_exclna$model, "PR")
remuneration_factors_exclna$revenue <- log(remuneration_factors_exclna$revenue)
# incl covariates
remuneration_factors_exclna <- merge(remuneration_factors_exclna, ts, by = "artist")
names(remuneration_factors_exclna)[6] <- "ts"
# estimate models
mlm_1 <- lm(revenue ~ model * label_type + model * ratiofem, data = remuneration_factors_exclna); summary(mlm_1)
mlm_2 <- lm(revenue ~ model * label_type + model * ratiofem + ts, data = remuneration_factors_exclna); summary(mlm_2)
mlm_3 <- lm.cluster(revenue ~ model * label_type + model * ratiofem + ts, cluster = 'artist', data = remuneration_factors_exclna); summary(mlm_3)
############################
#CHECKING MULTICOLLINEARITY#
############################
remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
# incl covariates
remuneration <- merge(remuneration, ts, by = "artist")
names(remuneration)[7] <- "ts"
# correlation matrix --> do this with the continuous IVs
rfcont <- remuneration[, c(2,3,7)]
res <- rcorr(as.matrix(rfcont))
res
vif(mlm_3$lm_res, type = "predictor")
#load data
remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
# transform revenue to log
remuneration$revenue_PR <- log(remuneration$revenue_PR)
remuneration$revenue_AGM <- log(remuneration$revenue_AGM)
remuneration$revenue_UC <- log(remuneration$revenue_UC)
# t test with revenue itself
test_pr_uc <- t.test(remuneration$revenue_PR, remuneration$revenue_UC, alternative="two.sided", conf.level=0.95, paired = TRUE)
test_pr_uc
#load data
remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
# t test with revenue itself
test_pr_uc <- t.test(remuneration$revenue_PR, remuneration$revenue_UC, alternative="two.sided", conf.level=0.95, paired = TRUE)
test_pr_uc
#load data
remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
# transform revenue to log
remuneration$revenue_PR <- log(remuneration$revenue_PR)
remuneration$revenue_AGM <- log(remuneration$revenue_AGM)
remuneration$revenue_UC <- log(remuneration$revenue_UC)
# t test with revenue itself
test_pr_uc <- t.test(remuneration$revenue_PR, remuneration$revenue_UC, alternative="two.sided", conf.level=0.95, paired = TRUE)
test_pr_uc
test_pr_agm <- t.test(remuneration$revenue_PR, remuneration$revenue_AGM,alternative="two.sided", conf.level=0.95, paired = TRUE)
test_pr_agm
test_agm_uc <- t.test(remuneration$revenue_AGM, remuneration$revenue_UC,alternative="two.sided", conf.level=0.95, paired = TRUE)
test_agm_uc
#load data
remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
# t test with revenue itself
test_pr_uc <- t.test(remuneration$revenue_PR, remuneration$revenue_UC, alternative="two.sided", conf.level=0.95, paired = TRUE)
test_pr_uc
test_pr_agm <- t.test(remuneration$revenue_PR, remuneration$revenue_AGM,alternative="two.sided", conf.level=0.95, paired = TRUE)
test_pr_agm
test_agm_uc <- t.test(remuneration$revenue_AGM, remuneration$revenue_UC,alternative="two.sided", conf.level=0.95, paired = TRUE)
test_agm_uc
##########################
#INTERPRETATION OF COEFFS#
##########################
intercept <- exp(mlm_3$lm_res$coefficients[1])
intercept
library(data.table)
library(dplyr)
library(DescTools)
library(ggplot2)
library(boot)
# load data
remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
remuneration_spread <- fread("../../gen/temp/artist_remuneration_factors_exclna.csv", select = c(2:6))
remuneration_spread$model <- as.factor(remuneration_spread$model)
# calculate the Gini's
gini_PR <-  DescTools::Gini(remuneration$revenue_PR)
gini_UC <-  DescTools::Gini(remuneration$revenue_UC)
gini_AGM <-  DescTools::Gini(remuneration$revenue_AGM)
# pro rata
boot(remuneration$revenue_PR,  DescTools::Gini, 1499)
boot_pr <- boot(remuneration$revenue_PR,  DescTools::Gini, 1499)
quantile(boot_pr$t, probs = c(0.025, 0.975))
# user centric
boot(remuneration$revenue_UC, DescTools::Gini, 1499)
boot_uc <- boot(remuneration$revenue_UC, DescTools::Gini, 1499)
quantile(boot_uc$t, probs = c(0.025, 0.975))
# agm
boot(remuneration$revenue_AGM,  DescTools::Gini, 1499)
boot_agm <- boot(remuneration$revenue_AGM,  DescTools::Gini, 1499)
quantile(boot_agm$t, probs = c(0.025, 0.975))
# pro rata vs. user-centric
testpruc <- t.test(boot_pr$t, boot_uc$t, alternative= "two.sided", conf.level=0.95, paired = TRUE)
testpruc
# pro rata vs. agm
testpragm <- t.test(boot_pr$t, boot_agm$t, alternative= "two.sided", conf.level=0.95, paired = TRUE)
testpragm
# agm vs. user-centric
testagmuc <- t.test(boot_agm$t, boot_uc$t, alternative= "two.sided", conf.level=0.95, paired = TRUE)
testagmuc
library(data.table)
library(dplyr)
library(broom)
library(ggplot2)
library(stringr)
library(jtools)
library(car)
library(fixest)
library(Hmisc)
library(lmtest)
library(miceadds)
# load data
remuneration_factors_exclna <- fread("../../gen/temp/artist_remuneration_factors_exclna.csv", select = c(2:6))
ts <- fread("../../gen/temp/ts.csv", select = c(2:3))
# factor vars
remuneration_factors_exclna$model <- as.factor(remuneration_factors_exclna$model)
remuneration_factors_exclna$model <- relevel(remuneration_factors_exclna$model, "PR")
# revenue as log
plot(remuneration_factors_exclna$revenue, dnorm(remuneration_factors_exclna$revenue, mean(remuneration_factors_exclna$revenue), sd(remuneration_factors_exclna$revenue)), ylab = "Density", xlab = "Revenue", family = "serif", col = "#506B99")
remuneration_factors_exclna$revenue <- log(remuneration_factors_exclna$revenue)
plot(remuneration_factors_exclna$revenue, dnorm(remuneration_factors_exclna$revenue, mean(remuneration_factors_exclna$revenue), sd(remuneration_factors_exclna$revenue)), ylab = "Density", xlab = "Revenue", family = "serif", col = "#506B99")
# incl covariates
remuneration_factors_exclna <- merge(remuneration_factors_exclna, ts, by = "artist")
names(remuneration_factors_exclna)[6] <- "ts"
# estimate models
mlm_1 <- lm(revenue ~ model * label_type + model * ratiofem, data = remuneration_factors_exclna); summary(mlm_1)
mlm_2 <- lm(revenue ~ model * label_type + model * ratiofem + ts, data = remuneration_factors_exclna); summary(mlm_2)
mlm_3 <- lm.cluster(revenue ~ model * label_type + model * ratiofem + ts, cluster = 'artist', data = remuneration_factors_exclna); summary(mlm_3)
# get F-statistic
summary(mlm_3$lm_res)
mlm_excla_res <- augment(mlm_3$lm_res)
# independence & linearity
plot(mlm_3$lm_res, 1, family = "serif", col = "#506B99") #iep
# equality of variance (homoscedasticity)
plot(mlm_3$lm_res, 3, family = "serif", col = "#506B99") #iep
ggplot(mlm_excla_res, aes(.resid)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5, col = "#bed6ff", fill = "#bed6ff") +
stat_function(fun = dnorm, args = list(mean = mean(mlm_excla_res$.resid), sd = sd(mlm_excla_res$.resid)), color="#506B99", size=2) +
theme_light() +
labs(x = "Residuals", y = "Density") +
theme(text = element_text(size = 12, family = "serif"))
# load data
remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
remuneration_spread <- fread("../../gen/temp/artist_remuneration_factors_exclna.csv", select = c(2:6))
remuneration_spread$model <- as.factor(remuneration_spread$model)
# calculate the Gini's
gini_PR <-  DescTools::Gini(remuneration$revenue_PR)
gini_UC <-  DescTools::Gini(remuneration$revenue_UC)
gini_AGM <-  DescTools::Gini(remuneration$revenue_AGM)
# pro rata
plot(Lc(remuneration$revenue_PR), col = "#bed6ff",
lwd = 2, xlab = "cumulative % of artists",
ylab = "cumulative % of income", family = "serif")
text(x = 0.16, y = 0.9, "Gini = 0.812", cex = 1.1, family = "serif")
library(data.table)
library(dplyr)
library(DescTools)
library(ggplot2)
# load data
remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
remuneration_spread <- fread("../../gen/temp/artist_remuneration_factors_exclna.csv", select = c(2:6))
tlt <- fread("../../gen/temp/tlt.csv", select = c(2:3))
remuneration <- merge(remuneration, tlt, by = "artist")
names(remuneration)[10] <- "tlt"
remuneration_spread$model <- as.factor(remuneration_spread$model)
remuneration_spread$model <- relevel(remuneration_spread$model, c("PR"))
# transforming revenue to log
remuneration$revenue_PR_log <- log(remuneration$revenue_PR)
remuneration$revenue_UC_log <- log(remuneration$revenue_UC)
remuneration$revenue_AGM_log <- log(remuneration$revenue_AGM)
remuneration_spread$revenue_log <- log(remuneration_spread$revenue)
#######################################
#MOST AND LEAST PAID ARTISTS PER MODEL#
#######################################
remuneration_PR <- remuneration[, c(1:4)]
most_PR <- remuneration_PR[order(remuneration_PR$revenue_PR, decreasing = TRUE), ][1:10]
least_PR <- remuneration_PR[order(remuneration_PR$revenue_PR, decreasing = FALSE), ][1:10]
remuneration_UC <- remuneration[, c(1:3,5)]
most_UC <- remuneration_UC[order(remuneration_UC$revenue_UC, decreasing = TRUE), ][1:10]
least_UC <- remuneration_UC[order(remuneration_UC$revenue_UC, decreasing = FALSE), ][1:10]
remuneration_AGM <- remuneration[, c(1:3,6)]
most_AGM <- remuneration_AGM[order(remuneration_AGM$revenue_AGM, decreasing = TRUE), ][1:10]
least_AGM <- remuneration_AGM[order(remuneration_AGM$revenue_AGM, decreasing = FALSE), ][1:10]
View(most_PR)
View(most_AGM)
View(most_UC)
View(least_AGM)
View(least_PR)
View(least_UC)
View(least_AGM)
ggplot(remuneration_spread,
aes(x = model, y = revenue_log)) +
geom_boxplot(fill = "#bed6ff") +
theme_light() +
labs(x = "Remuneration models", y = "log(Revenue)") +
theme(text = element_text(size = 12, family = "serif"))
# violion plot
ggplot(remuneration_spread,  aes(x = model, y = revenue_log)) +
geom_violin(scale = "count", fill = "#bed6ff") +
theme_light() +
labs(x = "Remuneration models", y = "log(Revenue)") +
theme(text = element_text(size = 12, family = "serif"))
varPR <- var(remuneration$revenue_PR)
sdPR <- sqrt(varPR)
varUC <- var(remuneration$revenue_UC)
sdUC <- sqrt(varUC)
varAGM <- var(remuneration$revenue_AGM)
sdAGM <- sqrt(varAGM)
summary(remuneration$revenue_PR)
summary(remuneration$revenue_AGM)
summary(remuneration$revenue_UC)
# load data
remuneration_factors_exclna <- fread("../../gen/temp/artist_remuneration_factors_exclna.csv", select = c(2:6))
ts <- fread("../../gen/temp/ts.csv", select = c(2:3))
# factor vars
remuneration_factors_exclna$model <- as.factor(remuneration_factors_exclna$model)
remuneration_factors_exclna$model <- relevel(remuneration_factors_exclna$model, "PR")
remuneration_factors_exclna$revenue <- log(remuneration_factors_exclna$revenue)
# incl covariates
remuneration_factors_exclna <- merge(remuneration_factors_exclna, ts, by = "artist")
names(remuneration_factors_exclna)[6] <- "ts"
# estimate models
mlm_1 <- lm(revenue ~ model * label_type + model * ratiofem, data = remuneration_factors_exclna); summary(mlm_1)
mlm_2 <- lm(revenue ~ model * label_type + model * ratiofem + ts, data = remuneration_factors_exclna); summary(mlm_2)
mlm_3 <- lm.cluster(revenue ~ model * label_type + model * ratiofem + ts, cluster = 'artist', data = remuneration_factors_exclna); summary(mlm_3)
#load data
remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
# t test with revenue itself
test_pr_uc <- t.test(remuneration$revenue_PR, remuneration$revenue_UC, alternative="two.sided", conf.level=0.95, paired = TRUE)
test_pr_uc
test_pr_agm <- t.test(remuneration$revenue_PR, remuneration$revenue_AGM,alternative="two.sided", conf.level=0.95, paired = TRUE)
test_pr_agm
test_agm_uc <- t.test(remuneration$revenue_AGM, remuneration$revenue_UC,alternative="two.sided", conf.level=0.95, paired = TRUE)
test_agm_uc
library(data.table)
library(dplyr)
library(anytime)
library(ggplot2)
library(stringr)
# load data
users_1month <- fread("../../gen/temp/users_1month_allmod.csv", select = c(2:11))
userinfo <- fread("../../gen/temp/userinfo_filtered.csv", select = c(2:6))
userdata_1k <- fread("../../data/userdata_1k.csv")
userdata_1k <- userdata_1k[-c(1)]
# timestamp to dates
userdata_1k$date <- as.Date(userdata_1k$timestamp)
# dates to total time timestamps
userdata_1k <- userdata_1k %>% group_by(userid) %>% mutate(total_days = max(date)-min(date))
# days numeric
userdata_1k$total_days_num <- as.numeric(userdata_1k$total_days, unit = "days")
# trim down data
userdata_user_totaldays <- userdata_1k[, -c(1,3:9)]
userdata_user_totaldays <- userdata_user_totaldays[!duplicated(userdata_user_totaldays), ]
# filter impossible values
userdata_user_totaldays <- userdata_user_totaldays %>% filter(total_days_num <= 1541)
ggplot(userdata_user_totaldays, aes(total_days_num)) +
geom_histogram(color = "#bed6ff", fill = "#bed6ff", binwidth = 30) +
theme_light() +
labs(x = "Total listening history in days", y = "Number of users")+
theme(text = element_text(size = 12.5, family = "serif"))
length(unique(userdata_1k$userid))
###########
#USER INFO#
###########
userinfo <- userinfo %>% filter(!(userid %in% check_na$userid))
#####################################
#CHECK AND REMOVE LABEL NA FROM DATA#
#####################################
check_na <- users_1month %>% filter(is.na(label))
check_na <- check_na[, 1]
check_na <- check_na %>% distinct()
users_1month_exclna <- users_1month %>% filter(!(is.na(label)))
check_na <- check_na %>% filter(!(userid %in% users_1month_exclna$userid))
###########
#USER INFO#
###########
userinfo <- userinfo %>% filter(!(userid %in% check_na$userid))
#####################################
#CHECK AND REMOVE LABEL NA FROM DATA#
#####################################
check_na <- users_1month %>% filter(is.na(label))
View(users_1month)
sum(is.na(users_1month))
# import dataset
users_1month <- fread("../../gen/temp/users_1month_classified.csv")
users_1month <- users_1month[, -1]
#users_1month <- users_1month %>% filter(!(is.na(userid)))
users_1month <- users_1month %>% filter(!(is.na(label)))
# create separate dataset with only artist, userid & gender
gender <- users_1month[, c(1,3,6)]
# split dataset per user
gender_split <- split(gender, gender$userid)
# function to assign user gender to each artist
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
distinct(df, df[2], .keep_all = TRUE)
}
# apply function to all users
gender_artist <- lapply(gender_split, gender_artist_per_user)
# turn list into data frame
gender_artist <- do.call(rbind.data.frame, gender_artist)
row.names(gender_artist) <- NULL
gender_artist <- gender_artist[-c(1)]
# count times of gender per artist & pivot wider
gender_artist <-
gender_artist %>%
group_by(artist, gender) %>%
summarise(total_count=n(), .groups = 'drop')
gender_artist$gender[(gender_artist$gender) == ''] <- 'none'
gender_artist <- gender_artist %>%
group_by(artist) %>% pivot_wider(names_from = gender,values_from = total_count)
# recoding NA values to 0
gender_artist[is.na(gender_artist)] <- 0
# coding the gender ratios
gender_artist <-
gender_artist %>%
mutate(ratiofem = f/(f+m+none))
# matching to the dataset
gender_artist <- gender_artist[, -c(2:4)]
# join with dataset
users_1month <- full_join(users_1month, gender_artist, by = "artist")
# write to csv
write.csv(users_1month, "../../gen/temp/users_1month_allmod_inclna.csv")
# import dataset
users_1month <- fread("../../gen/temp/users_1month_classified.csv")
users_1month <- users_1month[, -1]
users_1month <- users_1month %>% filter(!(is.na(userid)))
# create separate dataset with only artist, userid & gender
gender <- users_1month[, c(1,3,6)]
# split dataset per user
gender_split <- split(gender, gender$userid)
# function to assign user gender to each artist
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
distinct(df, df[2], .keep_all = TRUE)
}
# apply function to all users
gender_artist <- lapply(gender_split, gender_artist_per_user)
# turn list into data frame
gender_artist <- do.call(rbind.data.frame, gender_artist)
row.names(gender_artist) <- NULL
gender_artist <- gender_artist[-c(1)]
# count times of gender per artist & pivot wider
gender_artist <-
gender_artist %>%
group_by(artist, gender) %>%
summarise(total_count=n(), .groups = 'drop')
gender_artist$gender[(gender_artist$gender) == ''] <- 'none'
gender_artist <- gender_artist %>%
group_by(artist) %>% pivot_wider(names_from = gender,values_from = total_count)
# recoding NA values to 0
gender_artist[is.na(gender_artist)] <- 0
# coding the gender ratios
gender_artist <-
gender_artist %>%
mutate(ratiofem = f/(f+m+none))
# matching to the dataset
gender_artist <- gender_artist[, -c(2:4)]
# join with dataset
users_1month <- full_join(users_1month, gender_artist, by = "artist")
# write to csv
write.csv(users_1month, "../../gen/temp/users_1month_allmod_inclna.csv")
#filter nas
users_1month <- users_1month %>% filter(!(is.na(label)))
sum(is.na(users_1month$label))
# load data
users_1month <- fread("../../gen/temp/users_1month_allmod_inclna.csv", select = c(2:11))
# load data
users_1month <- fread("../../gen/temp/users_1month_allmod.csv", select = c(2:11))
users_1month_inclna <- fread("../../gen/temp/users_1month_allmod_inclna.csv", select = c(2:11))
sum(is.na(users_1month_inclna$label))
#####################################
#CHECK AND REMOVE LABEL NA FROM DATA#
#####################################
check_na <- users_1month_inclna %>% filter(is.na(label))
check_na <- check_na[, 1]
check_na <- check_na %>% distinct()
users_1month_exclna <- users_1month_inclna %>% filter(!(is.na(label)))
check_na <- check_na %>% filter(!(userid %in% users_1month_exclna$userid))
na_users <- users_1month_inclna %>% filter(userid %in% check_na$userid)
###########
#USER INFO#
###########
userinfo <- userinfo %>% filter(!(userid %in% check_na$userid))
userinfo$registered <- anydate(userinfo$registered)
# check values gender
table(userinfo$gender)
# % of NA
(70/767)*100
# check NA's for other variables
sum(userinfo$registered == "")
sum(userinfo$country == "")
sum(is.na(userinfo$age))
# check NA's for other variables
sum(userinfo$registered == NA)
View(userinfo)
