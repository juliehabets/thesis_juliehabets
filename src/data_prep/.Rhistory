lyrics_data <- song %>%
pull(song.id) %>%
purrr::map(lyrics,
artist = artist,
type = "id",
key = key) %>%
purrr::map_df(data.frame) %>%
slice(-15) # There is a repeated lyric there!
lyrics_data <- song %>%
pull(song.id) %>%
purrr::map(lyrics,
artist = artist,
type = "id",
key = key) %>%
purrr::map_df(data.frame) %>%
slice(-15) # There is a repeated lyric there!
# vagalumeR
key <- 835426a514b5ad77b79de934a7b936df
# vagalumeR
key <- "835426a514b5ad77b79de934a7b936df"
lyrics_data <- song %>%
pull(song.id) %>%
purrr::map(lyrics,
artist = artist,
type = "id",
key = key) %>%
purrr::map_df(data.frame) %>%
slice(-15) # There is a repeated lyric there!
glimpse(lyrics_data)
install.packages("Rspotify")
library(Rspotify)
install.packages("httr")
install.packages("httr")
library(httr)
library(Rspotify)
# Rspotify
my_oauth <- spotifyOAuth()
# Rspotify
my_oauth <- spotifyOAuth(client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "391b897e9e204c27aaa35d7d7ba91c52")
# Rspotify
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "391b897e9e204c27aaa35d7d7ba91c52")
library(Rspotify)
library(vagalumeR)
library(tidyverse)
library(httr)
# Rspotify
SPOTIFY_ID <- "b57bb630866045ee85b513376a7f8cc5"
SECRET_KEY <- "391b897e9e204c27aaa35d7d7ba91c52"
response <- POST(
"https://accounts.spotify.com/api/token",
config = authenticate(user = Sys.getenv("SPOTIFY_ID"),
password = Sys.getenv("SECRET_KEY")),
body = list(grant_type = "client_credentials"),
encode = "form"
)
#extract content of response
token <-  content(response)
# Paste the token_type with the access_token
# needs it when making the authorization
bearer.token <- paste(token$token_type, token$access_token)
track.id <- "5u6y4u5EgDv0peILf60H5t"
track.response <- GET(paste0("https://api.spotify.com/v1/audio-features/",track.id),
config = add_headers(Authorization = bearer.token)
)
View(track.response)
View(track.response)
library(dplyr)
# Paste the token_type with the access_token
# needs it when making the authorization
bearer.token <- paste(token$token_type, token$access_token)
track.response <- GET(paste0("https://api.spotify.com/v1/audio-features/",track.id),
config = add_headers(Authorization = bearer.token)
)
View(track.response)
track <- as_tibble(content( track.response ))
track.features <- track %>% select(c(1:11, 17, 18))
View(track)
View(response)
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "391b897e9e204c27aaa35d7d7ba91c52")
)
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "4db6865daf1f451fb3bc73b577e293b2")
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "4db6865daf1f451fb3bc73b577e293b2")
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "4db6865daf1f451fb3bc73b577e293b2")
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "4db6865daf1f451fb3bc73b577e293b2")
install.packages("installr")
?installr
installing/loading the package: if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr   updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr   updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
library(installr)
installing/loading the package: if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr   updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
iif(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr   updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr   updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
updateR()
library(rtweet)
tweets <-
search_tweets(
"Spotify" + "Gender",
n = 400)
tweets <-
search_tweets(
c("Spotify", "Gender"),
n = 400)
tweets <-
search_tweets(
c("Spotify AND Gender"),
n = 400)
View(tweets)
tweets <-
search_tweets(
c("Spotify AND Gender"),
n = 400,
lang = 'en')
View(tweets)
tweets <-
search_tweets(
c("Spotify AND LGBTQ"),
n = 400,
lang = 'en')
View(tweets)
tweets <-
search_tweets(
"Spotify AND LGBTQ",
n = 400,
lang = 'en')
View(tweets)
tweets <-
search_tweets(
"Spotify AND LGBTQ",
n = 400,
lang = 'en',
include_rts = FALSE)
View(tweets)
tweets <-
search_tweets(
"Spotify AND Gender bias",
n = 400,
lang = 'en',
include_rts = FALSE)
tweets <-
search_tweets(
"Spotify AND genderbias",
n = 400,
lang = 'en',
include_rts = FALSE)
tweets <-
search_tweets(
"Spotify AND Bias",
n = 400,
lang = 'en',
include_rts = FALSE)
View(tweets)
tweets <-
search_tweets(
"Spotify AND gender AND bias",
n = 400,
lang = 'en',
include_rts = FALSE)
tweets <-
search_tweets(
"Spotify AND #blackhistorymonth",
n = 400,
lang = 'en',
include_rts = FALSE)
tweets <-
search_tweets(
"Spotify AND LGBTQ",
n = 400,
lang = 'en',
include_rts = FALSE)
View(tweets)
deezer <- search_tweets(
"Deezer",
n = 50,
lan = 'en'
)
library(rtweet)
deezer <- search_tweets(
"Deezer",
n = 50,
lan = 'en'
)
View(deezer)
?search_tweets
deezer <- search_tweets(
"Deezer",
n = 50,
lang = 'en'
)
View(deezer)
deezer <- search_tweets(
"#Deezer",
n = 50,
lang = 'en'
)
View(deezer)
library(readr)
install.packages("readr")
install.packages("readr")
library(installr)
install.packages("installr")
library(installr)
updateR()
library(readr)
install.packages("readr")
library(dplyr)
install.packages("dplyr")
install.packages("tidyverse")
install.packages("tidyverse")
# Load packages
library(tidyverse)
#Create data folder
dir.create("../../data")
# Input
urls_calender = c("http://data.insideairbnb.com/united-states/co/denver/2022-09-26/data/calendar.csv.gz",
"http://data.insideairbnb.com/ireland/leinster/dublin/2022-09-11/data/calendar.csv.gz",
"http://data.insideairbnb.com/united-kingdom/england/london/2022-09-10/data/calendar.csv.gz",
"http://data.insideairbnb.com/united-states/ca/los-angeles/2022-09-09/data/calendar.csv.gz",
"http://data.insideairbnb.com/italy/lombardy/milan/2022-09-14/data/calendar.csv.gz",
"http://data.insideairbnb.com/germany/bv/munich/2022-06-21/data/calendar.csv.gz",
"http://data.insideairbnb.com/united-states/ny/new-york-city/2022-09-07/data/calendar.csv.gz",
"http://data.insideairbnb.com/france/ile-de-france/paris/2022-06-06/data/calendar.csv.gz",
"http://data.insideairbnb.com/united-states/or/portland/2022-09-16/data/calendar.csv.gz",
"http://data.insideairbnb.com/united-states/ca/san-francisco/2022-09-07/data/calendar.csv.gz")
urls_listing = c("http://data.insideairbnb.com/united-states/co/denver/2022-09-26/data/listings.csv.gz",
"http://data.insideairbnb.com/ireland/leinster/dublin/2022-09-11/data/listings.csv.gz",
"http://data.insideairbnb.com/united-kingdom/england/london/2022-09-10/data/listings.csv.gz",
"http://data.insideairbnb.com/united-states/ca/los-angeles/2022-09-09/data/listings.csv.gz",
"http://data.insideairbnb.com/italy/lombardy/milan/2022-09-14/data/listings.csv.gz",
"http://data.insideairbnb.com/germany/bv/munich/2022-06-21/data/listings.csv.gz",
"http://data.insideairbnb.com/united-states/ny/new-york-city/2022-09-07/data/listings.csv.gz",
"http://data.insideairbnb.com/france/ile-de-france/paris/2022-06-06/data/listings.csv.gz",
"http://data.insideairbnb.com/united-states/or/portland/2022-09-16/data/listings.csv.gz",
"http://data.insideairbnb.com/united-states/ca/san-francisco/2022-09-07/data/listings.csv.gz")
install.packages("readr")
install.packages("readr")
install.packages("data.table")
install.packages("shiny")
install.packages("shinyWidgets")
install.packages("bslib")
install.packages("shinythemes")
install.packages("yaml")
install.packages("readr")
install.packages("tidypredict")
install.packages("broom")
setwd("C:/Users/julie/Documents/thesis/github/src/data_prep")
library(data.table)
library(dplyr)
library(anytime)
library(ggplot2)
library(stringr)
# load data
users_1month <- fread("../../gen/temp/users_1month_allmod.csv", select = c(2:11))
artist_remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
tlt <- fread("../../gen/temp/tlt.csv", select = c(2:3))
View(tlt)
View(artist_remuneration)
justice <-  users_1month %>% filter(users_1month$artist == "justice")
justice <-  5196/579178
md <- 4692/579178
dm <- 4301/579178
beatles <- 3693/579178
radiohead <- 3312/579178
686/579178
lj <- 686/579178
dvno <- 645/579178
wrong <- 589/579178
genesis <- 525/579178
rod shoe <- 486/579178
red <- 486/579178
library(dplyr)
library(data.table)
library(DescTools)
library(tidyr)
library(magrittr)
library(ineq)
# load data
users_1month <- fread("../../gen/temp/users_1month_allmod.csv")
gender_ratio <- fread("../../gen/temp/gender_ratio_artist.csv")
# removing columns for better overview (userid, trackname, artist, gender,label_type, femratio))
users_1month <- users_1month[, c(2, 4, 6, 7, 10, 11)] %>% filter(!(is.na(label_type)))
# removing columns for better overview (artist & femratio)
gender_ratio <- gender_ratio[, c(2,6)]
library(dplyr)
library(data.table)
library(tidyr)
# import dataset
users_1month <- fread("../../gen/temp/users_1month_classified.csv")
users_1month <- users_1month[, -1]
users_1month <- users_1month %>% filter(!(is.na(userid)))
users_1month <- users_1month %>% filter(!(is.na(label)))
# create separate dataset with only artist, userid & gender
gender <- users_1month[, c(1,3,6)]
# split dataset per user
gender_split <- split(gender, gender$userid)
# function to assign user gender to each artist
gender_artist_per_user <- function(l){
df <- as.data.frame(l)
distinct(df, df[2], .keep_all = TRUE)
}
# apply function to all users
gender_artist <- lapply(gender_split, gender_artist_per_user)
# turn list into data frame
gender_artist <- do.call(rbind.data.frame, gender_artist)
row.names(gender_artist) <- NULL
gender_artist <- gender_artist[-c(1)]
# count times of gender per artist & pivot wider
gender_artist <-
gender_artist %>%
group_by(artist, gender) %>%
summarise(total_count=n(), .groups = 'drop')
gender_artist$gender[(gender_artist$gender) == ''] <- 'none'
gender_artist <- gender_artist %>%
group_by(artist) %>% pivot_wider(names_from = gender,values_from = total_count)
# recoding NA values to 0
gender_artist[is.na(gender_artist)] <- 0
# coding the gender ratios
gender_artist <-
gender_artist %>%
mutate(ratiofem = f/(f+m+none))
# write to csv
write.csv(gender_artist, file = "../../gen/temp/gender_ratio_artist.csv")
# matching to the dataset
gender_artist <- gender_artist[, -c(2:4)]
# join with dataset
users_1month <- full_join(users_1month, gender_artist, by = "artist")
# write to csv
write.csv(users_1month, "../../gen/temp/users_1month_allmod.csv")
library(dplyr)
library(data.table)
library(DescTools)
library(tidyr)
library(magrittr)
library(ineq)
# load data
users_1month <- fread("../../gen/temp/users_1month_allmod.csv")
gender_ratio <- fread("../../gen/temp/gender_ratio_artist.csv")
# removing columns for better overview (userid, trackname, artist, gender,label_type, femratio))
users_1month <- users_1month[, c(2, 4, 6, 7, 10, 11)] %>% filter(!(is.na(label_type)))
# removing columns for better overview (artist & femratio)
gender_ratio <- gender_ratio[, c(2,6)]
users_PR <-
users_1month %>%
group_by(artist) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n))
total_revenue = length(unique(users_1month$userid))*9.99
users_PR <-
users_PR %>%
mutate(revenue_PR = freq*total_revenue)
users_PR <- merge(users_PR, users_1month, by = "artist")
users_PR <- users_PR[, c(1,3,4)] %>% distinct()
##############
#USER-CENTRIC#
##############
users_split <- split(users_1month, users_1month$userid)
# revenue per user function
revenue_per_user <- function(l){
df <- as.data.frame(l)
df %>% group_by(df[2]) %>%
summarise(n = n()) %>%
mutate(freq = n/sum(n)) %>%
mutate(revenue_UC = freq * 9.99) %>%
ungroup()
}
# apply to every list in users_UC_split
users_UC_split <- lapply(users_split, revenue_per_user)
# turn list into data frame
unlist_UC_split <- do.call(rbind.data.frame, users_UC_split)
row.names(unlist_UC_split) <- NULL
# aggregating the data to artist level
users_UC <- unlist_UC_split %>% aggregate(revenue_UC ~ artist, sum)
users_UC <- merge(users_UC, users_1month, by = "artist")
users_UC <- users_UC[, -c(3:7)] %>% distinct()
users_AGM <- users_PR %>% mutate(decile = ntile(-freq, 10))
names(users_AGM)[3] <- "revenue_AGM"
# taxing decile 1 & 2
dec12 <- users_AGM %>% filter(decile <= 2)
dec12$revenue_AGM <- dec12$revenue_AGM*0.9
# giving back to decile 3-6
dec3456 <- users_AGM %>% filter(decile %in% (3:6))
rev_cut <- sum(dec12$revenue_AGM)*0.1
# checking unique artists
length(unique(dec3456$artist))
artists_dec3456 <- 9478 # CHECK THIS IF DATASET CHANGES
# extra revenue per artist
extra <- rev_cut/artists_dec3456
dec3456$revenue_AGM <- dec3456$revenue_AGM+extra
# creating dataset decile 7-10
dec78910 <- users_AGM %>% filter(decile %in% (7:10))
# merging datasets together
users_AGM <- rbind(dec12, dec3456, dec78910)
users_AGM <- users_AGM[, -c(2,4)] %>% distinct()
# merging all the models together
users_PR <- users_PR[, -2]
artist_remuneration_final <- merge((merge(users_PR, users_UC, by = "artist")), users_AGM, by = "artist")
artist_info <- users_1month[, c(2,5)] %>% distinct()
artist_info <- merge(artist_info, gender_ratio, by = "artist")
artist_remuneration_final <- merge(artist_info, artist_remuneration_final, by = "artist")
# merging with factors
users_PR$model <- as.factor("PR")
users_UC$model <- as.factor("UC")
users_AGM$model <- as.factor("AGM")
names(users_PR)[2] <- "revenue"
names(users_UC)[2] <- "revenue"
names(users_AGM)[2] <- "revenue"
artist_remuneration_factors <- rbind(users_PR, users_UC, users_AGM)
artist_remuneration_factors <- merge(artist_info, artist_remuneration_factors, by = "artist")
# write to csv
write.csv(artist_remuneration_final, "../../gen/temp/artist_remuneration_final_exclna.csv")
write.csv(artist_remuneration_factors, "../../gen/temp/artist_remuneration_factors_exclna.csv")
library(data.table)
library(dplyr)
library(broom)
library(ggplot2)
library(stringr)
library(jtools)
library(car)
library(fixest)
library(Hmisc)
library(lmtest)
library(miceadds)
# load data
remuneration_factors_exclna <- fread("../../gen/temp/artist_remuneration_factors_exclna.csv", select = c(2:6))
tlt <- fread("../../gen/temp/tlt.csv", select = c(2:3))
# factor vars
remuneration_factors_exclna$model <- as.factor(remuneration_factors_exclna$model)
remuneration_factors_exclna$model <- relevel(remuneration_factors_exclna$model, "PR")
# revenue as log
remuneration_factors_exclna$revenue <- log(remuneration_factors_exclna$revenue)
# incl covariates
remuneration_factors_exclna <- merge(remuneration_factors_exclna, tlt, by = "artist")
names(remuneration_factors_exclna)[6] <- "tlt"
# estimate models
mlm_1 <- lm(revenue ~ model * label_type + model * ratiofem, data = remuneration_factors_exclna); summary(mlm_1)
mlm_2 <- lm(revenue ~ model * label_type + model * ratiofem + tlt, data = remuneration_factors_exclna); summary(mlm_2)
mlm_3 <- lm.cluster(revenue ~ model * label_type + model * ratiofem + tlt, cluster = 'artist', data = remuneration_factors_exclna); summary(mlm_3)
View(mlm_3)
#do a wald test to get F-statistic
waldtest(mlm_3, test = "F")
?waldtest
#do a wald test to get F-statistic
waldtest(mlm_3$lm_res, vcov = mlm_3$vcov, test = "F")
#do a wald test to get F-statistic
waldtest(data = mlm_3$lm_res, vcov = mlm_3$vcov, test = "F")
#do a wald test to get F-statistic
waldtest(mlm_3$lm_res, vcov = mlm_3$vcov, test = "F")
#do a wald test to get F-statistic
waldtest(mlm_3$lm_res$coefficients, vcov = mlm_3$vcov, test = "F")
#do a wald test to get F-statistic
summary(mlm_3$lm_res)
2.958928e-01
9.742777e-06
9.742777e-06
9.742777/1000000
9.742777/10
0.9742777/100
0.009742777/100
waldtest(mlm_3, vcov = mlm_3.vcovCL, test = "F")
waldtest(mlm_3, vcov = mlm_3$vcov, test = "F")
waldtest(mlm_3, vcov = mlm_3$vcov, test = "F")
waldtest(mlm_3, test = "F")
waldtest(mlm_3$lm_res, test = "F")
4.710426e-05
4.710426/1000
# independence & linearity
plot(mlm_3$lm_res, 1, family = "serif", col = "#506B99")
# equality of variance (homoscedasticity)
plot(mlm_3$lm_res, 3, family = "serif", col = "#506B99")
# normality
plot(mlm_3$lm_res, 2, family = "serif", col = "#506B99")
ggplot(mlm_excla_res, aes(.resid)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5, col = "#bed6ff", fill = "#bed6ff") +
stat_function(fun = dnorm, args = list(mean = mean(mlm_excla_res$.resid), sd = sd(mlm_excla_res$.resid)), color="#506B99", size=2) +
theme_light() +
labs(x = "Residuals", y = "Density") +
theme(text = element_text(size = 12, family = "serif"))
mlm_excla_res <- augment(mlm_3)
mlm_excla_res <- augment(mlm_2)
ggplot(mlm_excla_res, aes(.resid)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5, col = "#bed6ff", fill = "#bed6ff") +
stat_function(fun = dnorm, args = list(mean = mean(mlm_excla_res$.resid), sd = sd(mlm_excla_res$.resid)), color="#506B99", size=2) +
theme_light() +
labs(x = "Residuals", y = "Density") +
theme(text = element_text(size = 12, family = "serif"))
mlm_excla_res <- augment(mlm_3$lm_res)
ggplot(mlm_excla_res, aes(.resid)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5, col = "#bed6ff", fill = "#bed6ff") +
stat_function(fun = dnorm, args = list(mean = mean(mlm_excla_res$.resid), sd = sd(mlm_excla_res$.resid)), color="#506B99", size=2) +
theme_light() +
labs(x = "Residuals", y = "Density") +
theme(text = element_text(size = 12, family = "serif"))
# correlation matrix --> do this with the continuous IVs
rfcont <- remuneration_factors_exclna[, c(2,3,6)]
res <- rcorr(as.matrix(rfcont))
res
vif(mlm_3$lm_res, type = "predictor")
#load dta
remuneration <- fread("../../gen/temp/artist_remuneration_final_exclna.csv", select = c(2:7))
# transform revenue to log
remuneration$revenue_PR <- log(remuneration$revenue_PR)
remuneration$revenue_AGM <- log(remuneration$revenue_AGM)
remuneration$revenue_UC <- log(remuneration$revenue_UC)
# t test with revenue itself
test_pr_uc <- t.test(remuneration$revenue_PR, remuneration$revenue_UC, alternative="two.sided", conf.level=0.95, paired = TRUE)
test_pr_uc
test_pr_agm <- t.test(remuneration$revenue_PR, remuneration$revenue_AGM,alternative="two.sided", conf.level=0.95, paired = TRUE)
test_pr_agm
test_agm_uc <- t.test(remuneration$revenue_AGM, remuneration$revenue_UC,alternative="two.sided", conf.level=0.95, paired = TRUE)
test_agm_uc
