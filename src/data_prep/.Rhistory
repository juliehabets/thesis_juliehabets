)
) %>%
rename(after = treatment_period)
treat_table <-
paidsearch %>%
group_by(after, treatment) %>%
summarise(revenue = mean(revenue)) %>%
ungroup()
print(treat_table)
diff_no_treat <- abs(128.0709	- 131.5569)
diff_treat <- 104.9987	- 100.4183
did <- diff_no_treat - diff_treat
reg_did <- feols(revenue ~ after +
treatment +
after:treatment,
data = paidsearch)
tidy(reg_did, conf.int = TRUE)
reg_did_log <- feols(log(revenue) ~ after +
treatment +
after:treatment,
data = paidsearch)
tidy(reg_did_log, conf.int = TRUE)
#SE were se = "iid", but if there are clusters, se = "cluster". If vcov = "iid", then the standard-errors are based on the assumption that the errors are all independent and generated with the same law (in particular, same variance). If vcov = "hetero", this corresponds to the classic hereoskedasticity-robust standard-errors (White correction), where it is assumed that the errors are independent but the variance of their generative law may vary. If vcov = "cluster", then arbitrary correlation of the errors within clusters is accounted for. Same for vcov = "twoway": arbitrary correlation within each of the two clusters is accounted for.
reg_did_log_clust <- feols(log(revenue) ~ after +
treatment +
after:treatment,
cluster =  ~ {dma},
data = paidsearch)
tidy(reg_did_log_clust, conf.int = TRUE)
reg_did_log_fixed <- feols(log(revenue) ~ after +
treatment +
after:treatment
|
dma,
data = paidsearch)
tidy(reg_did_log_fixed, se='cluster', conf.int = TRUE)
mods <- list(
reg_did,
reg_did_log,
reg_did_log_clust,
reg_did_log_fixed)
msummary(mods,
coef_omit = "Interc",
gof_omit = "AIC|BIC|Log|Pseudo|F")
library(fixest)
coefplot(mods)
# Write your answer here
grp_avg %>%
filter(calweek <= week(exp_start)) %>%
ggplot(aes(x = calweek,
y = revenue,
color = factor(search_stays_on)
)
) +
geom_line() +
ggtitle("Average Daily Revenue from Search Engine Marketing",
subtitle = "Pre-treatment Period") +
xlab("Calendar Week") +
ylab("Revenue ('000s of USD)") +
theme_bw()
install.packages("spotifyr")
library(spotifyr)
install.packages("vagalumeR")
library(vagalumeR)
# vagalumeR
artist <-"belle-sebastian"
song <- songNames(artist)
View(song)
library(tidyverse)
glimpse(lyrics_data)
lyrics_data <- song %>%
pull(song.id) %>%
purrr::map(lyrics,
artist = artist,
type = "id",
key = key) %>%
purrr::map_df(data.frame) %>%
slice(-15) # There is a repeated lyric there!
lyrics_data <- song %>%
pull(song.id) %>%
purrr::map(lyrics,
artist = artist,
type = "id",
key = key) %>%
purrr::map_df(data.frame) %>%
slice(-15) # There is a repeated lyric there!
# vagalumeR
key <- 835426a514b5ad77b79de934a7b936df
# vagalumeR
key <- "835426a514b5ad77b79de934a7b936df"
lyrics_data <- song %>%
pull(song.id) %>%
purrr::map(lyrics,
artist = artist,
type = "id",
key = key) %>%
purrr::map_df(data.frame) %>%
slice(-15) # There is a repeated lyric there!
glimpse(lyrics_data)
install.packages("Rspotify")
library(Rspotify)
install.packages("httr")
install.packages("httr")
library(httr)
library(Rspotify)
# Rspotify
my_oauth <- spotifyOAuth()
# Rspotify
my_oauth <- spotifyOAuth(client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "391b897e9e204c27aaa35d7d7ba91c52")
# Rspotify
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "391b897e9e204c27aaa35d7d7ba91c52")
library(Rspotify)
library(vagalumeR)
library(tidyverse)
library(httr)
# Rspotify
SPOTIFY_ID <- "b57bb630866045ee85b513376a7f8cc5"
SECRET_KEY <- "391b897e9e204c27aaa35d7d7ba91c52"
response <- POST(
"https://accounts.spotify.com/api/token",
config = authenticate(user = Sys.getenv("SPOTIFY_ID"),
password = Sys.getenv("SECRET_KEY")),
body = list(grant_type = "client_credentials"),
encode = "form"
)
#extract content of response
token <-  content(response)
# Paste the token_type with the access_token
# needs it when making the authorization
bearer.token <- paste(token$token_type, token$access_token)
track.id <- "5u6y4u5EgDv0peILf60H5t"
track.response <- GET(paste0("https://api.spotify.com/v1/audio-features/",track.id),
config = add_headers(Authorization = bearer.token)
)
View(track.response)
View(track.response)
library(dplyr)
# Paste the token_type with the access_token
# needs it when making the authorization
bearer.token <- paste(token$token_type, token$access_token)
track.response <- GET(paste0("https://api.spotify.com/v1/audio-features/",track.id),
config = add_headers(Authorization = bearer.token)
)
View(track.response)
track <- as_tibble(content( track.response ))
track.features <- track %>% select(c(1:11, 17, 18))
View(track)
View(response)
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "391b897e9e204c27aaa35d7d7ba91c52")
)
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "4db6865daf1f451fb3bc73b577e293b2")
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "4db6865daf1f451fb3bc73b577e293b2")
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "4db6865daf1f451fb3bc73b577e293b2")
my_oauth <- spotifyOAuth(app_id = "thesis", client_id = "b57bb630866045ee85b513376a7f8cc5", client_secret = "4db6865daf1f451fb3bc73b577e293b2")
install.packages("installr")
?installr
installing/loading the package: if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr   updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr   updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
library(installr)
installing/loading the package: if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr   updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
iif(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr   updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr   updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
updateR()
library(rtweet)
tweets <-
search_tweets(
"Spotify" + "Gender",
n = 400)
tweets <-
search_tweets(
c("Spotify", "Gender"),
n = 400)
tweets <-
search_tweets(
c("Spotify AND Gender"),
n = 400)
View(tweets)
tweets <-
search_tweets(
c("Spotify AND Gender"),
n = 400,
lang = 'en')
View(tweets)
tweets <-
search_tweets(
c("Spotify AND LGBTQ"),
n = 400,
lang = 'en')
View(tweets)
tweets <-
search_tweets(
"Spotify AND LGBTQ",
n = 400,
lang = 'en')
View(tweets)
tweets <-
search_tweets(
"Spotify AND LGBTQ",
n = 400,
lang = 'en',
include_rts = FALSE)
View(tweets)
tweets <-
search_tweets(
"Spotify AND Gender bias",
n = 400,
lang = 'en',
include_rts = FALSE)
tweets <-
search_tweets(
"Spotify AND genderbias",
n = 400,
lang = 'en',
include_rts = FALSE)
tweets <-
search_tweets(
"Spotify AND Bias",
n = 400,
lang = 'en',
include_rts = FALSE)
View(tweets)
tweets <-
search_tweets(
"Spotify AND gender AND bias",
n = 400,
lang = 'en',
include_rts = FALSE)
tweets <-
search_tweets(
"Spotify AND #blackhistorymonth",
n = 400,
lang = 'en',
include_rts = FALSE)
tweets <-
search_tweets(
"Spotify AND LGBTQ",
n = 400,
lang = 'en',
include_rts = FALSE)
View(tweets)
deezer <- search_tweets(
"Deezer",
n = 50,
lan = 'en'
)
library(rtweet)
deezer <- search_tweets(
"Deezer",
n = 50,
lan = 'en'
)
View(deezer)
?search_tweets
deezer <- search_tweets(
"Deezer",
n = 50,
lang = 'en'
)
View(deezer)
deezer <- search_tweets(
"#Deezer",
n = 50,
lang = 'en'
)
View(deezer)
library(readr)
install.packages("readr")
install.packages("readr")
library(installr)
install.packages("installr")
library(installr)
updateR()
library(readr)
install.packages("readr")
library(dplyr)
install.packages("dplyr")
install.packages("tidyverse")
install.packages("tidyverse")
# Load packages
library(tidyverse)
#Create data folder
dir.create("../../data")
# Input
urls_calender = c("http://data.insideairbnb.com/united-states/co/denver/2022-09-26/data/calendar.csv.gz",
"http://data.insideairbnb.com/ireland/leinster/dublin/2022-09-11/data/calendar.csv.gz",
"http://data.insideairbnb.com/united-kingdom/england/london/2022-09-10/data/calendar.csv.gz",
"http://data.insideairbnb.com/united-states/ca/los-angeles/2022-09-09/data/calendar.csv.gz",
"http://data.insideairbnb.com/italy/lombardy/milan/2022-09-14/data/calendar.csv.gz",
"http://data.insideairbnb.com/germany/bv/munich/2022-06-21/data/calendar.csv.gz",
"http://data.insideairbnb.com/united-states/ny/new-york-city/2022-09-07/data/calendar.csv.gz",
"http://data.insideairbnb.com/france/ile-de-france/paris/2022-06-06/data/calendar.csv.gz",
"http://data.insideairbnb.com/united-states/or/portland/2022-09-16/data/calendar.csv.gz",
"http://data.insideairbnb.com/united-states/ca/san-francisco/2022-09-07/data/calendar.csv.gz")
urls_listing = c("http://data.insideairbnb.com/united-states/co/denver/2022-09-26/data/listings.csv.gz",
"http://data.insideairbnb.com/ireland/leinster/dublin/2022-09-11/data/listings.csv.gz",
"http://data.insideairbnb.com/united-kingdom/england/london/2022-09-10/data/listings.csv.gz",
"http://data.insideairbnb.com/united-states/ca/los-angeles/2022-09-09/data/listings.csv.gz",
"http://data.insideairbnb.com/italy/lombardy/milan/2022-09-14/data/listings.csv.gz",
"http://data.insideairbnb.com/germany/bv/munich/2022-06-21/data/listings.csv.gz",
"http://data.insideairbnb.com/united-states/ny/new-york-city/2022-09-07/data/listings.csv.gz",
"http://data.insideairbnb.com/france/ile-de-france/paris/2022-06-06/data/listings.csv.gz",
"http://data.insideairbnb.com/united-states/or/portland/2022-09-16/data/listings.csv.gz",
"http://data.insideairbnb.com/united-states/ca/san-francisco/2022-09-07/data/listings.csv.gz")
install.packages("readr")
install.packages("readr")
install.packages("data.table")
install.packages("shiny")
install.packages("shinyWidgets")
install.packages("bslib")
install.packages("shinythemes")
install.packages("yaml")
install.packages("readr")
install.packages("tidypredict")
install.packages("broom")
setwd("C:/Users/julie/Documents/thesis/github/src/data_prep")
library(dplyr)
library(data.table)
# load dataset
artist_trackname <- fread("../../gen/temp/users_1month.csv", select = c(4, 10))
View(artist_trackname)
artists <- fread("../../data/discogs_artists.csv", sep = "\t", select = c(1:3), quote = "")
tracks <- fread("../../data/discogs_tracks.csv", sep = "\t", select = c(1, 4, 5), quote = "")
artists_label_notrack <- fread("../../gen/temp/artists_labels_notrack.csv")
# unique values in artist & tracks
artists_unique_largedf <- unique(artists$artistname)
artists_unique_largedf_realname  <- unique(artists$realname)
tracks_unique_largedf <- unique(tracks$trackname)
match_tracks_join_inner <- fread("../../gen/temp/match_tracks_join_inner.csv")
View(match_tracks_join_inner)
match_tracks_join_full <- match_tracks_join_full <- fread("../../gen/temp/match_tracks_join_full.csv")
View(match_tracks_join_full)
length(unique(match_tracks_join_full$labels))
length(unique(match_tracks_join_inner$labels))
match_tracks <- artist_trackname %>% filter(track_name %in% tracks_unique_largedf) %>% distinct(track_name, .keep_all = TRUE)
names(match_tracks)[1] <- "trackname"
names(match_tracks)[2] <- "artist"
View(match_tracks)
View(match_tracks)
artists_id_data <- artists %>% distinct(artistid, .keep_all = TRUE)
View(artists_id_data)
names(artists_id_data)[2] <- "artist"
artists_id_data$artist <- replace(artists_id_data$artist, artists_id_data$artist == "4 Hero", "4Hero")
artists_id_data_full <- full_join(artists_id_data, match_tracks, by = "artist")
artists_id_data_inner <- inner_join(artists_id_data, match_tracks, by = "artist")
View(artists_id_data_inner)
View(artists_id_data_full)
length(unique(artists_id_data_inner$trackname))
length(unique(artists_id_data_full$trackname))
rm(artists_id_data_full, artists_id_data_inner)
View(artists_id_data)
artists_id_data <- full_join(artists_id_data, match_tracks, by = "artist")
View(artists_id_data)
names(artists_id_data)[4] <- "trackname"
artists_id_data <- artists_id_data[!duplicated(artists_id_data), ]
View(tracks)
# matching datasets
match_tracks_join_inner <- inner_join(artists_id_data, tracks, by = c("trackname", "artistid"))
match_tracks_join_full <- full_join(artists_id_data, tracks, by = c("trackname", "artistid"))
View(match_tracks_join_full)
View(match_tracks_join_inner)
mt_join_inner <- fread("../../gen/temp/match_tracks_join_full.csv")
mt_join_full <- fread("../../gen/temp/match_tracks_join_inner.csv")
View(mt_join_full)
View(mt_join_inner)
tracks_unique <- tracks %>% group_by(artistid) %>% distinct(trackname, .keep_all = TRUE)
# matching datasets
match_tracks_join_inner <- inner_join(artists_id_data, tracks_unique, by = c("trackname", "artistid"))
match_tracks_join_full <- full_join(artists_id_data, tracks_unique, by = c("trackname", "artistid"))
# remove duplicates
match_tracks_join_inner <- match_tracks_join_inner[!duplicated(match_tracks_join_inner), ]
match_tracks_join_full <- match_tracks_join_full[!duplicated(match_tracks_join_full), ]
# write to csv
write.csv(match_tracks_join_inner, "../../gen/temp/match_tracks_join_inner.csv")
write.csv(match_tracks_join_full, "../../gen/temp/match_tracks_join_full.csv")
##################
#Matching artists#
##################
names(artist_trackname)[1] <- "trackname"
match_artists <- artist_trackname %>% filter(!(trackname %in% tracks_unique_largedf))
match_artists <- subset(match_artists, select = -c(1)) %>% distinct()
unique_artist_matchtracks <- unique(match_tracks_join_inner$artist)
match_artists <- match_artists %>% filter(!(artist %in% unique_artist_matchtracks))
match_artists1 <- match_artists %>% filter(artist %in% artists_unique_largedf)
match_realname <- match_artists %>% filter(artist %in% artists_unique_largedf_realname)
match_realname <- match_realname %>% filter(!(artist %in% match_artists1$artist))
match_artists <- rbind(match_artists1, match_realname)
View(match_artists)
# add labels
match_artists <- inner_join(match_artists, artists_label_notrack, by = "artist")
View(match_artists)
match_artists <- match_artists[, -c(2,3)]
# remove duplicates
match_artists <- match_artists[!duplicated(match_artists), ]
# write to csv
write.csv(match_artists, "../../gen/temp/match_artists.csv")
library(data.table)
library(dplyr)
match_tracks_join_inner <- fread("../../gen/temp/match_tracks_join_inner.csv")
match_artists <- fread("../../gen/temp/match_artists.csv")
users_1month <- fread("../../gen/temp/users_1month.csv")
match_tracks_join_inner <- match_tracks_join_inner[, -1]
names(match_tracks_join_inner)[c(3)] <- c("track_name")
match_artists <- match_artists[-1, -1]
names(match_artists)[c(1,2)] <- c("artist","label")
users_1month <- users_1month[, -c(1:3, 5:9, 11:17)]
View(match_artists)
match_artists <- fread("../../gen/temp/match_artists.csv")
View(match_artists)
match_artists <- match_artists[-1, -C(1,3)]
match_artists <- match_artists[-1, -c(1,3)]
names(match_artists)[c(1,2)] <- c("artist","label")
users_1month <- users_1month[, -c(1:3, 5:9, 11:17)]
View(users_1month)
# no duplicate rows
users_1month <- users_1month[!duplicated(users_1month), ]
source("C:/Users/julie/Documents/thesis/github/src/data_prep/6.label_to_data.R", echo=TRUE)
users_artists <- inner_join(users_1month, match_artists, by = "artist")
View(match_artists)
View(users_artists)
View(match_artists)
View(users_artists)
# clean
#users_artists <- users_artists[, -c(4)]
users_artists <- users_artists[!duplicated(users_artists), ]
# check NAs
users_artists_na <- users_artists %>% filter(is.na(label))
rm(users_artists_na)
users_tracks <- full_join(users_1month, match_tracks_join_inner, by = "track_name")
View(users_tracks)
sum(is.na(users_tracks$labels))
View(match_tracks_join_inner)
match_tracks_join_inner <- fread("../../gen/temp/match_tracks_join_inner.csv")
View(match_tracks_join_inner)
match_tracks_join_inner <- match_tracks_join_inner[, -c(1,2,4)]
length(unique(match_tracks_join_inner$trackname))
names(match_tracks_join_full)[c(2)] <- c("track_name")
users_tracks <- full_join(users_1month, match_tracks_join_inner, by = "track_name")
names(match_tracks_join_inner)[c(3)] <- c("track_name")
View(match_tracks_join_inner)
match_tracks_join_inner <- fread("../../gen/temp/match_tracks_join_inner.csv")
match_tracks_join_inner <- match_tracks_join_inner[, -c(1,2,4)]
names(match_tracks_join_inner)[c(2)] <- c("track_name")
users_tracks <- full_join(users_1month, match_tracks_join_inner, by = "track_name")
View(users_tracks)
# clean
users_tracks <- users_tracks[, -3]
names(users_tracks)[c(2,3)] <- c("artist", "label")
users_tracks <- users_tracks[!duplicated(users_tracks), ]
users_tracks <- inner_join(users_1month, match_tracks_join_inner, by = "track_name")
# clean
users_tracks <- users_tracks[, -3]
names(users_tracks)[c(2,3)] <- c("artist", "label")
users_tracks <- users_tracks[!duplicated(users_tracks), ]
# check NAs
na <- users_tracks %>% filter(is.na(label))
View(users_artists)
users_artists <- inner_join(users_1month, match_artists, by = "artist")
# clean
#users_artists <- users_artists[, -c(4)]
users_artists <- users_artists[!duplicated(users_artists), ]
rm(na)
View(users_tracks)
View(users_artists)
total_label <- rbind(users_artists, users_tracks)
View(total_label)
View(users_1month)
# find unmatching rows
no_tracks <- anti_join(users_1month, match_tracks_join_inner, by = "track_name")
View(no_tracks)
no_artists <- anti_join(users_1month, match_artists, by = "artist")
View(users_1month)
View(no_artists)
no_tracks <- no_tracks %>% filter(artist %in% match_artists$artist)
# find unmatching rows
no_tracks <- anti_join(users_1month, match_tracks_join_inner, by = "track_name")
no_tracks_yes_artists <- no_tracks %>% filter(artist %in% match_artists$artist)
View(no_tracks_yes_artists)
no_tracks_yes_artists2 <- no_tracks %>% filter(artist %in% match_tracks_join_inner$artist)
no_artists <- anti_join(users_1month, match_artists, by = "artist")
no_artists_yes_tracks <- no_artists %>% filter(track_name %in% match_tracks$track_name)
no_artists_yes_tracks <- no_artists %>% filter(track_name %in% match_tracks_join_inner$track_name)
View(no_artists_yes_tracks)
View(users_tracks)
artist_not_in_tracsk <- users_artists %>% filter(!(artist %in% users_tracks$artist))
View(artist_not_in_tracsk)
artist_not_in_tracks <- match_tracks %>% filter(!(artist %in% match_artists$artist))
artist_not_in_tracks <- match_tracks_join_inner %>% filter(!(artist %in% match_artists$artist))
View(artist_not_in_tracks)
label_artist_count <- users_tracks %>% group_by(artist) %>% count(label)
View(label_artist_count)
label_artist_count <- label_artist_count %>% group_by(artist) %>% mutate(max_n = max(n))
View(label_artist_count)
label_artist_count <- label_artist_count %>% group_by(artist) %>% filter(n == max_n)
full_tracks <- rbind(no_tracks_yes_artists, no_tracks_yes_artists2)
View(full_tracks)
full_tracks <- full_tracks[!duplicated(full_tracks), ]
full_no_tracks <- merge(full_tracks, label_artist_count, by = "artist")
View(full_no_tracks)
View(label_artist_count)
label_artist_count_1 <- label_artist_count %>% group_by(artist) %>% filter(n == 1) %>% slice(n=1)
View(label_artist_count_1)
label_artist_count_n <- label_artist_count %>% group_by(artist) %>% filter(n >1)
View(label_artist_count_n)
label_artist_count <- rbind(label_artist_count_1, label_artist_count_n)
View(label_artist_count)
label_artist_count <- label_artist_count[, 1:2]
full_no_tracks <- merge(full_tracks, label_artist_count, by = "artist")
View(full_no_tracks)
View(label_artist_count_1)
